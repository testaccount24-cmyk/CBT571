U370PSR  TITLE 'PRINT String and Register 0'
*
* Copyright 2001, 2002 James M. Morrison
*
*----------------------------------------------------------------------
*  To do: YES
*  1) Add AL1(count) after % sign (UPSR), if count > 1 R0 @ list
*     of fullwords to display, rather than R0 contents displayed
*----------------------------------------------------------------------
         U#SET FUNC=UTIL
*----------------------------------------------------------------------
* Function:    converts R0 into displayable hex, then
*              appends converted data onto input message text,
*              finally calls XMITLOG to output completed
*              text.
*
* Entry:  R0 = contents of R0 to be converted & displayed
*         R1 = address of message text, delimited by trailing % sign.
*
* Exit:   R15 =  0     everything is OK
*                else  error
*
*----------------------------------------------------------------------
* R2     ptr to currently scanning char in input buffer
* R3     max chars allowed to be scanned
* R4     length of input message text (not including % sign)
* R5     ptr to slot for converted R0 in our buffer
* R6
* R7
* R8     input R0
* R9     input message text ptr
* R10
*----------------------------------------------------------------------
         TITLE ' '
U370PSR  UPROC ID=UPSR,L=L$SAV
         EJECT ,
*
         LR    R8,R0              save input R0
         LA    R9,0(R1)           save msg text ptr
*----------------------------------------------------------------------
*  Convert R0 contents to displayable hex
*----------------------------------------------------------------------
XLATE    DS    0H
         ST    R0,WKFWORD              value to translate
         UNPK  WKWORK,WKFWORD(5)       spread out digits
         LA    R15,HEXCHAR
         LA    R14,C'0'
         SR    R15,R14
         TR    WKWORK,0(R15)           hexchar-c'0' translate to char
*----------------------------------------------------------------------
*  Find end of input message
*----------------------------------------------------------------------
L$MAXIN  EQU   120                maximum allowed input text length
*
         LR    R2,R9                   @ beginning of input msg txt
         LA    R3,L$MAXIN
SCAN     DS    0H
         CLI   0(R2),C'%'
         BE    HIT
*
         LA    R2,1(,R2)
         S     R3,=F'1'           too many chars scanned?
         BP    SCAN               not yet, ok to keep looking
*
*----------------------------------------------------------------------
*  Copy input message (less % sign) to our buffer
*----------------------------------------------------------------------
HIT      DS    0H
         MVI   WKMSG,C' '
         MVC   WKMSG+1(L'WKMSG-1),WKMSG
*
         LR    R4,R2
         SR    R4,R9              calc msg length
*        BCTR  R4,0               minus one for execute
         EX    R4,EXMVC           copy input msg to our buffer
*----------------------------------------------------------------------
*  Append displayable hex contents of R0 to our buffer
*----------------------------------------------------------------------
         LA    R5,WKMSG(R4)       @ spot to put data
         MVC   0(8,R5),WKWORK     append converted data
         LA    R5,8(,R5)          past last char
         LA    R0,WKMSG
         SR    R5,R0              length of message
*----------------------------------------------------------------------
*  Output our buffer
*----------------------------------------------------------------------
         ULOG WKMSG,(R5)          print out the message
*----------------------------------------------------------------------
*  Return to caller
*----------------------------------------------------------------------
EXIT     UPEND ,                  RETURN to caller
*
EXMVC    MVC   WKMSG(*-*),0(R9)   copy input msg to our buffer
*
         EJECT ,
*
         LTORG ,
*
*  Placed last so it's addressable as hexchar-c'0'
*  Oops, still not enough ... use base reg instead
*
HEXCHAR  DC    C'0123456789ABCDEF'     Hex translate table
*----------------------------------------------------------------------
*  Dynamic savearea & workarea
*----------------------------------------------------------------------
SAVEAREA DSECT ,
SAVREGS  DS    18F
WKMSG    DS    CL(L$MAXIN+9)      input msg, blank, 8 bytes of hex
WKFWORD  DS    F
         DS    F                  slop ... must be behind WKFWORD
WKWORK   DS    CL9                8 bytes plus trailing slop byte
         DS    XL20                    spare
         DS    0D                      align
L$SAV    EQU   *-SAVEAREA              length of savearea
         EJECT ,
         WATGD ,
*
         PRINT GEN
U370PSR  UFINI DXDUPSR,L$SAV
         END   ,
