XMITKDSN TITLE 'Split DSN into key fields'
*
* Copyright 2002 James M. Morrison
*
*----------------------------------------------------------------------
*  To do: NO
*----------------------------------------------------------------------
         U#SET FUNC=XMIT
*----------------------------------------------------------------------
* Function: Create DSN key fields for XMIT02A:
*           Key, count, and length/value pair(s)
*
* Caller: XMIT02A
*
* Entry:  S/370 ECMODE KEY=8, STATE=PROB, AUTHORIZED
*
*         R0  = address of segment space to contain
*               DSN key, count, and length/value pair(s)
*               CL80 is more than enough room
*
*         R1  = address of CL44 DSN
*
* Exit:   R15 = return code
*               00 success
*
* Abends:
*
* Notes: Split out from XMIT02A
*----------------------------------------------------------------------
* R2
* R3
* R4     @ segment data
* R5     length remaining in segment data
* R6     makdsnam ptr to count portion of new qualifier
* R7     makdsnam ptr to free slot in segment
* R8     makdsnam dsn char ptr
* R9     makdsnam # chars left in dsn to examine
* R10    makdsnam # chars in qualifier
* R11    XMTWA
* R12    base reg
* R13    savearea
*----------------------------------------------------------------------
ERR#1    EQU   1        dsn parse error
         TITLE ' '
*----------------------------------------------------------------------
XMITKDSN UPROC L=L$SA,ID=XKDS,INIT=MVCL
         STM   R0,R1,SAENTRY
         UDIAG 1,'KDSN enter'
*----------------------------------------------------------------------
*
* Maximum possible space consumed by dataset name:
*
* 123456789/123456789/123456789/123456789/1234
* A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.VW
* stored as:
*
* 0002         INDSNAM key
* 0016         22 qualifiers
* 0001 C1 0001 C2 0001 C3 0001 C4 0001 C5 0001 C6 0001 C7 0001 C8
* 0001 C9 0001 D1 0001 D2 0001 D3 0001 D4 0001 D5 0001 D6 0001 D7
* 0001 D8 0001 D9 0001 E2 0001 E3 0001 E4 0002 E5E6
*
* consumes 71 bytes.  We have way more than that left in the INMR02
* segment, so we don't worry about overflowing the segment buffer
*
* We only have to count the length/value pairs, and drop them in the
* segment being created
*
         LA    R6,SADSNAM              1st count slot
         LA    R7,2(,R6)               data space in segment
         L     R8,SAENTRY+4            @ dsn
         UDIAG 4,'KDSN dsname',(R8),44
         LA    R8,44-1(,R8)            @ dsn last char
         LA    R9,44                   max possible dsn length
*----------------------------------------------------------------------
*  Determine length of input dataset name
*----------------------------------------------------------------------
GETLEN   DS    0H                      calc # chars in dsn
         CLI   0(R8),C' '              trailing space?
         BNE   HAVLEN
         BCTR  R8,0                    r8 back one character
         BCT   R9,GETLEN               minus trailing space
HAVLEN   DS    0H                      r9 = # chars in dsn
         LTR   R9,R9                   better be something left
         BP    LENOK
         UDIAG 0,'KDSN input dsn parse error'
         MVI   SAREASON,ERR#1          dsn parse error
DIE      UABEND ,                      can't parse dsn
LENOK    DS    0H
         UPSR  4,'KDSN dsn length %',(R9)
*----------------------------------------------------------------------
*  Handle one qualifier at a time
*----------------------------------------------------------------------
         L     R8,SAENTRY+4            @ dsn's first char
         STM   R0,R15,XMTREGS          debug aid
         UDIAG 5,'KDSN newqual init regs',XMTREGS,16*4
*
NEWQUAL  DS    0H
         SLR   R10,R10                 # chars in qualifier
         STM   R0,R15,XMTREGS          debug aid
         UDIAG 5,'KDSN newqual regs',XMTREGS,16*4
*----------------------------------------------------------------------
*  Scan qualifier for end
*----------------------------------------------------------------------
NXTCHAR  DS    0H                      parse the qualifier
         CLI   0(R8),C'.'              found period?
         BE    TERMQUAL                yes, end of qualifier
         MVC   0(1,R7),0(R8)           copy qualifier char
         LA    R7,1(,R7)               next segment char slot
         LA    R8,1(,R8)               next dsn char
         LA    R10,1(,R10)             account for char moved
         BCT   R9,NXTCHAR              one less dsn char
*
*  Falling through means last qualifer (no '.')
*
         STM   R0,R15,XMTREGS          debug aid
         UDIAG 4,'KDSN nxtchar fallthru = last',XMTREGS,16*4
*----------------------------------------------------------------------
*  Found end of qualifier
*----------------------------------------------------------------------
TERMQUAL DS    0H
         UDIAG 4,'KDSN termqual loop'
         STCM  R10,3,0(R6)             set # chars in qual
         SLR   R14,R14                 clean x02quals reg
         ICM   R14,3,SAQUALS           old # qualifiers
         LA    R14,1(,R14)             one more
         STCM  R14,3,SAQUALS           update
*
         LR    R6,R7                   next count slot
         LA    R7,2(,R7)               next data slot
         LA    R8,1(,R8)               skip period
         STM   R0,R15,XMTREGS          debug aid
         UDIAG 5,'KDSN next qual regs',XMTREGS,16*4
*
         LTR   R9,R9                   all done?
         BNP   MADEDSNM
         BCT   R9,NEWQUAL              account for period,
*                                      do another qualifier
*----------------------------------------------------------------------
*  Finished updating segment with dsn, return
*----------------------------------------------------------------------
MADEDSNM DS    0H
         L     R15,SAENTRY             @ output buffer
         MVC   SAKDSN,=AL2(INMDSNAM)   set DSN key
         MVC   0(L$OUT,R15),SAKDSN     return data to caller
         STM   R0,R15,XMTREGS          debug aid
         UDIAG 5,'KDSN exit regs',XMTREGS,16*4
         UDIAG 2,'KDSN exit savearea',(RSA),L$SA
         UPEND  ,
         EJECT ,
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
         LTORG ,
*----------------------------------------------------------------------
*  Workarea
*----------------------------------------------------------------------
SAVEAREA DSECT ,
SASA     DS    18F           savearea for anyone we call
SAENTRY  DS    2F            R0:R1 from entry
*
SAKDSN   DS    AL2           DSN key
SAQUALS  DS    AL2           DSN # qualifiers
SADSNAM  DS    CL67          DSN count/data pairs built here
L$OUT    EQU   *-SAKDSN
*
SAREASON DS    X
         DS    0D
L$SA     EQU   *-SAVEAREA
*
         EJECT ,
         PUSH  PRINT
         PRINT NOGEN
         DXSEG ,
         WAXMIT ,
         POP   PRINT
XMITKDSN UFINI DXDXKDS,L$SA            pseudo-register
         END   ,
