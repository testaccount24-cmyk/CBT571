U370ABND TITLE 'UABEND macro support'
*
* Copyright 2002 James M. Morrison
*
*----------------------------------------------------------------------
*  To do:
*----------------------------------------------------------------------
         U#SET DIAG=NO,FUNC=UTIL
*----------------------------------------------------------------------
* Function:    Issues WTO describing ABEND prior to returning to
*              caller which will issue actual ABEND SVC
*
* Entry: R0         SNAP/SDUMP parm
*
*                    BITS
*        R1         (00:07)  REASON code
*                   (08:19)  reserved
*                   (20:31)  ABEND code
*
*        R14 ->     SVC 13, followed immediately by option bytes:
*
*                   +00 (1) ABEND macro options
*
*                           1... .... DUMP
*                           .1.. .... STEP
*
*                   +01 (1) Parm validity bits
*
*                           1... .... R1(00:07) REASON code
*                           .1.. .... R1(20:31) ABEND code
*                           ..1. .... R0 SNAP/SDUMP parm reg
*                           .... ...1 +02, +03 option bytes present
*
*                   +02 (1) not currently generated by UABEND
*
*                   +03 (1) not currently generated by UABEND
*
* Exit:  Returns to callers' SVC 13 instruction (ABEND SVC)
*
* Diagnostics:
*             9 - savearea after options analysis
*
* Notes: UABEND macro stored regs R0-R15 in &XMTABND before call.
*        I've since written U370SDWA, which captures the regs
*        via the SDWA which is nicer
*
*        U370ABND assumes caller follows normal xxxx370
*        register conventions:
*
*        R11  -  TGD
*        R12  -  program base
*        R13  -  savearea/workarea
*
*        U370ABND returns to the caller's ABEND SVC, so that any
*        dumps reflect the actual code that wished to ABEND, rather
*        than issuing ABEND from here.
*
*----------------------------------------------------------------------
* R2
* R3
* R4     options
* R5
* R6
* R7
* R8
* R9     @ caller's savearea
* R10    @ caller's return, options
* R11    @ TGDWA
* R12    pgm base
* R13    @ savearea
*----------------------------------------------------------------------
         TITLE ' '
U370ABND UPROC ID=UABD,L=L$SA
         EJECT ,
*----------------------------------------------------------------------
*  Zappable options for U370ABND
*----------------------------------------------------------------------
         B     INIT
*
         DS    0F
ABOPT    DS    0XL4               U370ABND option bytes
*
*                01234567
*
ABOPT1   DC    B'10000000'        IBM ABEND macro options
*                1.......         DUMP
*                .1......         STEP
*
ABOPT2   DC    B'00000000'        spare
*
ABOPT3   DC    B'00000000'        spare
*
ABOPT4   DC    B'00000000'        spare
*
*  UABEND currently only defines 2 option bytes
*
UOPTMASK EQU   B'1100'            ICM mask for UABEND option bytes
*
*
ABOPT5   DC    B'00000000'        U370ABND overrides
AB5IGN1 EQU 128  1.......         ignore UABEND 1st option byte
AB5IGN2 EQU 64   .1......         ignore UABEND 2nd option byte
AB5IGN3 EQU 32   ..1.....         ignore UABEND 3rd option byte
AB5IGN4 EQU 16   ...1....         ignore UABEND 4th option byte
*
ABOPT6   DC    B'00000000'        spare
*
         EJECT ,
*----------------------------------------------------------------------
*  Initialize
*----------------------------------------------------------------------
INIT     DS    0H
         L     R9,4(,R13)              @ caller's SA
         USING SXBASE,R9
         L     R10,SXR14               caller's R14 @ SVC 13 + options
*----------------------------------------------------------------------
*  Ignore UABEND option bytes as per ABOPT5
*----------------------------------------------------------------------
         SLR   R4,R4
         ICM   R4,UOPTMASK,2(R10)      grab UABEND option bytes
*
         TM    ABOPT5,AB5IGN1
         BNO   *+8
         ICM   R4,8,ZERO               ignore UABEND 1st option byte
*
         TM    ABOPT5,AB5IGN2
         BNO   *+8
         ICM   R4,4,ZERO               ignore UABEND 2nd option byte
*
         TM    ABOPT5,AB5IGN3
         BNO   *+8
         ICM   R4,2,ZERO               ignore UABEND 3rd option byte
*
         TM    ABOPT5,AB5IGN4
         BNO   *+8
         ICM   R4,1,ZERO               ignore UABEND 4th option byte
*----------------------------------------------------------------------
*  If ABOPT specified a value, make sure it gets used
*  Store caller's UABEND macro expansion option bytes in SAOPTS
*----------------------------------------------------------------------
         O     R4,ABOPT                assert ABOPT choices
         ST    R4,SAOPTS               save options bytes in SA
*----------------------------------------------------------------------
*  If we're recursing give up hope right now
*----------------------------------------------------------------------
         MVC   SARABND(16*4),TGDABEND  in case of recursion
         TM    TGDFLG1,TGD1ABND        UABEND recursing?
         BO    RECURSE                 abandon all hope
*
         OI    TGDFLG1,TGD1ABND        UABEND in progress
*----------------------------------------------------------------------
*  Handle ABEND, REASON code(s)
*----------------------------------------------------------------------
         L     R0,SXR0                 UABEND R0 contents
         ST    R0,SARUR0               UABEND R0 contents
         TM    SAOPT1,SA1SNAP          valid SNAP/SDUMP parm?
         BNO   *+8
         ST    R0,SAPARM0              ABEND R0 value
*
         L     R0,SXR1                 UABEND R1 contents
         ST    R0,SARUR1               UABEND R1 contents
         TM    SAOPT1,SA1RSN           caller provided REASON code?
         BNO   *+8                     no, leave REASON alone
         STCM  R0,8,SAREASON+3         yes
*
         L     R14,DEFABND             default abend code
         N     R0,=X'00000FFF'         only user ABENDs supported
         TM    SAOPT1,SA1COD           caller provided ABEND code?
         BO    *+6                     yes, br
         LR    R0,R14                  assign default
         ST    R0,SAABEND
         UDIAG 9,'ABND savearea',SAVEAREA,L$SA
*----------------------------------------------------------------------
*  Issue a WTO describing the ABEND
*----------------------------------------------------------------------
         MVI   SAMSG1,C' '
         MVC   SAMSG1+1(L'SAMSG1-1),SAMSG1
         MVC   SAM1LIT1,=C'UABEND'
*
         L     R0,SAABEND              load (user) ABEND code
         SLL   R0,32-12                preserve only rightmost 12 bits
         SRL   R0,32-12                which contains user ABEND code
         CVD   R0,SADBL                convert to decimal
         UNPK  SACHAR,SADEC            convert to EBCDIC
         OI    SASIGN,X'F0'            repair sign nibble
         MVI   SAM1LIT2,C'U'
         MVC   SAM1TXT2,SARESULT
         MVI   SAM1LIT3,C'-'
*
         L     R0,SAREASON             ABEND reason code
         SLR   R1,R1
         UCALL U370HEX
         STCM  R1,3,SAM1TXT3
*
         LA    R0,2(,R10)              just past ABEND SVC
         LA    R1,SAVBUF               @ U370VADR buffer
         UCALL U370VADR                locate ABENDing code
         MVC   SAM1MCO,SAVMCO          module.csect.offset
*
         MVI   SAM1LEN,L$MSG1          set WTO msg length
         UWTO  0,SAMPARM
*----------------------------------------------------------------------
*  Close xxxxLOG before ABENDing to flush pending messages
*----------------------------------------------------------------------
CLOSE    DS    0H
         ULOG TERM=YES
*----------------------------------------------------------------------
*  Return to caller for ABEND issuance
*----------------------------------------------------------------------
ABEND    DS    0H
         L     R0,SAPARM0              SNAP/SDUMP parm
         L     R1,SAABEND              abend code
         ICM   R1,8,SAOPT0             ABEND options
*
         XC    SX@FWD,SX@FWD           erase caller's fwd SA ptr to us
*                                      so U370STAE doesn't report us
*                                      as the ABENDing SX
*
         LR    R14,R10                 restore caller's return addr
         L     R15,SAREASON               insert ABEND reason
         LM    R2,R13,SARUR2              except R0, R1, and R14
         BR    R14                     return to caller's ABEND SVC
*
DEFABND  DC    F'200'                  default abend code
*----------------------------------------------------------------------
*  Recursive UABENDs, WTO & bail
*----------------------------------------------------------------------
RECURSE  DS    0H
         WTO   'ABND recursing; ABEND U(400)'
         ABEND 400,DUMP
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
ZERO     DC    F'0'
         PRINT DATA
PATCH    DC    32S(*)                  <zap>
*
         LTORG ,
*----------------------------------------------------------------------
*  Dynamic savearea & workarea - based R13
*----------------------------------------------------------------------
SAVEAREA DSECT ,
SAVREGS  DS    18F
*
SAPARM0  DS    F                       U370ABND parm R0
SAPARM1  DS    F                       U370ABND parm R1
SAREASON DS    F                       U370ABND reason code
SAABEND  DS    F                       U370ABND abend code
*
SAOPTS   DS    F                       U370ABND options from UABEND
*
SAOPT0   EQU   SAOPTS+0,1              IBM ABEND macro options
SA0DUMP  EQU   128                     ABEND n,DUMP
SA0STEP  EQU   64                      ABEND n,,STEP
*
SAOPT1   EQU   SAOPTS+1,1              U370ABND parm validity options
SA1RSN   EQU   128                     REASON code valid
SA1COD   EQU   64                      ABEND code valid
SA1SNAP  EQU   32                      SNAP/SDUMP parm reg R0
SA1MORE  EQU   1                       Options +2 & +3 valid
*
SARABND  DS    16F                     TGDABEND copied here @ entry
SARUR0   EQU   SARABND+(00*4)
SARUR1   EQU   SARABND+(01*4)
SARUR2   EQU   SARABND+(02*4)
*
*  Binary to EBCDIC workarea
*
SADBL    DS    D                       CVD workarea
SADEC    EQU   SADBL+5,3               decimal ABEND code max 4095
SACHAR   DS    CL5                     max user ABEND 04095
SASIGN   EQU   SACHAR+4,1              packed sign repair byte
SARESULT EQU   SACHAR+1,4
*
SAVBUF   DS    0D
         DVADRBUF PFX=SAV              U370VADR buffer
*
*  WTO message text, preceded by AL1 length
*
SAMPARM  DS    0D
SAM1LEN  DS    AL1                     message length for UWTO
SAM1LIT1 DS    C'UABEND'
         DS    C
SAM1LIT2 DS    C'U'                    User ABEND code
SAM1TXT2 DS    C'dddd'                 User ABEND code
SAM1LIT3 DS    C'-'
SAM1TXT3 DS    C'xx'                   reason code
         DS    C
SAM1MCO  DS    CL(L'SAVMCO)            module.csect.offset
L$MSG1   EQU   *-SAM1LIT1
SAMSG1   EQU   SAM1LIT1,L$MSG1
SAEND    DS    0D
L$SA     EQU   *-SAVEAREA              length of savearea
*
         WATGD PRINT=ON
         EJECT ,
*
U370ABND UFINI DXDUABND,L$SA
         END   ,
