XMIT02A  TITLE 'Unload PDS, write INMR02 IEBCOPY segment'
*
* Copyright 2001, 2002 James M. Morrison
*
*----------------------------------------------------------------------
*  To do:
*  1) Move XMITESZ call to after the SYSUT2 DSCB has been read
*     (is it?), then use the SYSUT2 DSCB to estimate space required.
*     SYSUT2 might need RELEASE SPACE call to make it as accurate
*     as possible; however, is that a good idea?
*     User might have overallocated SYSUT2 to cause TSO/E RECEIVE
*     to overallocate its output file instead of the no-extra-room
*     allocation TSO/E RECEIVE usually delivers.
*----------------------------------------------------------------------
         U#SET FUNC=XMIT
*----------------------------------------------------------------------
* Function: Call IEBCOPY to unload the input dataset
*           Write the IEBCOPY INMR02 segment
*
* Caller: XMITUNLD when SYSUT1 DSORG=PO
*
* Entry:  S/370 ECMODE KEY=8, STATE=PROB, AUTHORIZED
*
*         R0  =
*         R1  =
*
* Exit:   R15 = return code
*               00 success
*
* Diagnostics:
*              1 - entry/exit
*              2 - internal trace
*              3 - DSCB, JFCB, DCB
*              4 - savearea at exit
*
* Notes: XMITUNLD only calls us for DSORG=PO datasets
*        XMIT370 has already read in the JFCB for the input dataset.
*        We also read SYSUT1's Format-1 DSCB, for XMITCPR1.
*----------------------------------------------------------------------
* R2     DCB
* R3     JFCB
* R4     @ segment data
* R5     length remaining in segment data
* R6     Format1 DSCB
* R7
* R8
* R9
* R10
* R11    XMTWA
* R12    base reg
* R13    savearea
*----------------------------------------------------------------------
ERR#1    EQU   1        SYSUT1 OBTAIN error
ERR#2    EQU   2        SYSUT2 OPEN   error
ERR#3    EQU   3        SYSUT2 RDJFCB error
         TITLE ' '
*----------------------------------------------------------------------
XMIT02A  UPROC L=L$SA,ID=X02A,INIT=MVCL
         UDIAG 1,'XMIT02A enter'
         LA    R2,XMTDCBI
         LA    R3,XMTJFCB1                  @ SYSUT1 JFCB
         USING IHADCB,R2
         USING JFCB,R3
         UDIAG 4,'XMIT02A XMTDCBI',(R2),L$DCB
         UDIAG 4,'XMIT02A XMTJFCB1',(R3),L$JFCB
*----------------------------------------------------------------------
* Initialize IEBCOPY INMR02 segment
*----------------------------------------------------------------------
         MVI   X02SEGL,12                   segment length
         MVI   X02SEGF,SEG$1+SEG$L+SEG$C    segment flags
         MVC   X02ID,=C'INMR02'
         L     R0,XMT#FILE
         ST    R0,X02NUM                    file number
         MVC   SAKEY1(L$PROT),PROTLIST      copy prototype keys list
*----------------------------------------------------------------------
*  Obtain SYSUT1 Format 1 DSCB
*----------------------------------------------------------------------
*
*  Format-1 DSCB of dataset to be XMIT'd.
*  OBTAIN macro returns first 96 bytes of XMTDSCB1 = data portion
*  of DSCB, next 5 bytes = CCHHR of DSCB (zero for VSAM/VIO).
*
         MVC   XMTDSN1,JFCBDSNM             copy dsn
         MVC   SACAML(L$CAMLST),CAMLST      copy CAMSLT; +0(4) flags
         LA    R0,JFCBDSNM
         ST    R0,SACAML+04                 dsn
         LA    R0,JFCBVOLS
         ST    R0,SACAML+08                 volser
         LA    R6,XMTDSCB1                  SYSUT1 DSCB area
         ST    R6,SACAML+12                 @ dscb buffer
         OBTAIN SACAML                      obtain SYSUT1 DSCB1
         ST    R15,SARC                     save return code
         L     R15,SARC
         LTR   R15,R15                      OBTAIN good?
         BZ    OBTAINOK
         UPSR  0,'XMIT02A SYSUT1 OBTAIN error; rc',(R15)
         UDIAG 0,'XMIT02A OBTAIN parmlist',SACAML,L$CAMLST
         MVI   SAREASON,ERR#1               OBTAIN error
DIE      UABEND SAREASON
OBTAINOK DS    0H
         UDIAG 3,'XMIT02A SYSUT1 DSCB',XMTDSN1,44+140
         USING DSCB1,R6
*----------------------------------------------------------------------
*  Estimate the size (in bytes) of the input dataset
*----------------------------------------------------------------------
         LR    R0,R6                   @ SYSUT1 Format1 DSCB
         LR    R1,R2                   @ SYSUT1 open DCB
         UCALL XMITESZ,ERR=EXIT
         STCM  R0,15,XSIZE             approximate # bytes allocated
         ST    R0,XMTESZ               for XMIT02B, XMIT03
*----------------------------------------------------------------------
*  Determine how many directory blocks the PDS has allocated
*----------------------------------------------------------------------
         LR    R1,R2                   @ open SYSUT1 DCB
         UCALL XMITDIR,ERR=EXIT
         STCM  R0,7,XDIR               directory blocks allocated
*----------------------------------------------------------------------
*  Format dataset name
*----------------------------------------------------------------------
MAKEDSN  DS    0H
         LA    R0,SAKDSN                    @ DSN key segment space
         LA    R1,JFCBDSNM                  @ dataset name
         UCALL XMITKDSN                     build dsn fields
*----------------------------------------------------------------------
*  Build INMR02 segment
*----------------------------------------------------------------------
         LA    R0,SAKSIZE
         ST    R0,SA@SIZE
         MVC   SAKSIZE(6),KSIZE
         LA    R0,SAKDSORG
         ST    R0,SA@DSORG
         MVC   SAKDSORG(6),KDSORG
         LA    R0,SAKLRECL
         ST    R0,SA@LRECL
         MVC   SAKLRECL(6),KLRECL
         LA    R0,SAKBLKSZ
         ST    R0,SA@BLKSZ
         MVC   SAKBLKSZ(6),KBLKSZ
         LA    R0,SAKRECFM
         ST    R0,SA@RECFM
         MVC   SAKRECFM(6),KRECFM
         LA    R0,SAKDIR
         ST    R0,SA@DIR
         MVC   SAKDIR(6),KDIR
         LA    R0,SAKDSN
         ST    R0,SA@DSN
*
*  Note LRECL is only a two byte field, but TSO/E TRANSMIT seems to
*  always store the LRECL value as a four byte field.
*  Similarly, RECFM and BLKSIZE are transmitted in larger fields, too.
*
         MVC   XDSORG,JFCDSORG              dsorg
         MVC   XLRECL+2(2),JFCLRECL         lrecl
         MVC   XRECFM(1),JFCRECFM           recfm
         MVC   XBLKSZ+2(2),JFCBLKSI         block size
         LA    R0,X02MR02                   @ segment buffer
         ST    R0,SA@BUF
         OI    SAKEYX,X'80'                 set VL flag
         LA    R1,SAKEYPL                   @ parmlist
         UCALL XMITKEY                      build segment from key list
*----------------------------------------------------------------------
*  Write INMR02 segment for DSORG=PO dataset
*----------------------------------------------------------------------
WRITE02  DS    0H
         LA    R1,X02MR02
         UCALL XMITPUT                      write INMR02 segment
         EJECT ,
*----------------------------------------------------------------------
* Close the SYSUT1 input dataset
*----------------------------------------------------------------------
CLOSE    DS    0H
         UDIAG 2,'XMIT02A: close DSORG=PO SYSUT1'
         MVC   XMTCLOS(L$CLOS),MODLCLOS     copy model CLOSE macro
         CLOSE XMTDCBI,MF=(E,XMTCLOS)       close DSORG=PO SYSUT1
         EJECT ,
*----------------------------------------------------------------------
* Call IEBCOPY to unload the PDS
*----------------------------------------------------------------------
IEBCOPY  DS    0H
         LA    R0,=CL8'IEBCOPY'
         LOAD  EPLOC=(0)               load IEBCOPY
         LTR   R15,R15
         BZ    GOCOPY
         ST    R15,SARC
         UPSR  0,'XMIT02A: IEBCOPY LOAD failed; rc',(R15)
         B     EXIT
*
GOCOPY   DS    0H
         LR    R15,R0                  get entry address
         LA    R15,0(,R15)             clear hi byte for DELETE
         LR    R9,R15
         LA    R1,SAPRMOS              IEBCOPY parm: OS parm string
         ST    R1,SAPRM1
         OI    SAPRM1,X'80'            end of VL parmlist
         LA    R1,SAPRM1
         BALR  R14,R15                 call IEBCOPY
         ST    R15,SARC
         UPSR  2,'XMIT02A IEBCOPY rc %',(R15)
         L     R15,SARC
         LTR   R15,R15
         BNZ   EXIT
*
DELCOPY  DS    0H
         UDIAG 2,'XMIT02A: IEBCOPY unload successful'
         LA    R0,=CL8'IEBCOPY'
         DELETE EPLOC=(0)              delete IEBCOPY
*----------------------------------------------------------------------
* Open the IEBCOPY output dataset as our input, retrieve JFCB
*----------------------------------------------------------------------
OPEN     DS    0H
         MVC   XMTOPN(L$OPN),MODLOPN     copy model OPEN macro
         MVC   XMTDCBI(L$DCBI),MODLDCBI  copy model DCB
         OPEN  XMTDCBI,MF=(E,XMTOPN)        open IEBCOPY's SYSUT2
         MVC   XMTJFCBL(L$JFCBL),JFCBLST    copy open exit list
         LA    R0,XMTJFCB2                  relocate JFCB addr
         STCM  R0,7,XMTJFCBL+1
         LA    R0,XMTJFCBL                  relocate DCB's EXLST
         STCM  R0,7,(DCBEXLSA-IHADCB)+XMTDCBI
         OPEN  XMTDCBI,MF=(E,XMTOPN)
         TM    DCBOFLG1,DCBOFOPN            opened?
         BO    DCBIOPEN
         UDIAG 0,'XMIT02A SYSUT2 OPEN error'
         MVI   SAREASON,ERR#2               SYSUT2 didn't open
         B     DIE                          input DCB didn't open
DCBIOPEN DS    0H
         UDIAG 3,'XMIT02A SYSUT2 DCB open',(R2),L$DCB
         RDJFCB XMTDCBI,MF=(E,XMTOPN)       SYSUT2 JFCB
         LTR   R15,R15
         BZ    SNAPJFCB
         ST    R15,SARC
         UPSR  0,'XMIT02A SYSUT2 RDJFCB error; rc %',(R15)
         MVI   SAREASON,ERR#3               SYSUT2 RDJFCB error
         B     DIE
SNAPJFCB DS    0H
         LA    R3,XMTJFCB2                  switch JFCBs
         ST    R3,XMT@JFCB                  SYSUT2 JFCB ptr
         UDIAG 3,'XMIT02A: SYSUT2 JFCB',XMTJFCB2,L$JFCB
*----------------------------------------------------------------------
*  Return to caller
*----------------------------------------------------------------------
EXIT     DS    0H
         UDIAG 4,'XMIT02A savearea',(RSA),L$SA
         OI    XMTFLG1,XMTF1$U              xmtdcbi now unloaded ds
         UPSR  1,'XMIT02A exit rc',*SARC
         UPEND RC=*SARC
         EJECT ,
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
PROTLIST DS    0D            prototype key list for U370KEY
X2@UTILN DC    A(KUTILN)     addr of UTILITY NAME key info
X2@SIZE  DC    A(KSIZE)              DATASET SIZE
X2@DSORG DC    A(KDSORG)             DSORG
X2@TYPE  DC    A(KTYPE)              TYPE
X2@LRECL DC    A(KLRECL)             LRECL
X2@BLKSZ DC    A(KBLKSZ)             BLKSIZE
X2@RECFM DC    A(KRECFM)             RECFM
X2@DSN   DC    A(KDSN)               DSN
L$PROT   EQU   *-PROTLIST
*
MODLOPN  OPEN  (,INPUT),MF=L           model OPEN
L$OPN    EQU   *-MODLOPN               L' model open
*
MODLCLOS CLOSE (,),MF=L                model CLOSE
L$CLOS   EQU   *-MODLCLOS              L' model close
*
JFCBLST  DS    0F
         DC    XL1'87'
         DC    AL3(0)
L$JFCBL  EQU   *-JFCBLST
*
CAMLST   CAMLST SEARCH,0,0,0
*
MODLDCBI DCB   DDNAME=SYSUT2,DSORG=PS,EXLST=JFCBLST,MACRF=R
L$DCBI   EQU   *-MODLDCBI
*
MR02     DS    0D
KUTILN   DC    AL2(INMUTILN,1,L'VUTILN)     1028 utility name
VUTILN   DC    C'IEBCOPY'
*
KSIZE    DC    AL2(INMSIZE,1,L'VSIZE)       102c approx file size
VSIZE    DC    XL4'BB60'
*
KDSORG   DC    AL2(INMDSORG,1,L'VDSORG)     003C dsorg
VDSORG   DC    XL2'0200'
*
KTYPE    DC    AL2(INMTYPE,1,L'VTYPE)       8012 optional dataset type
VTYPE    DC    X'00'
*
KLRECL   DC    AL2(INMLRECL,1,L'VLRECL)     0042 lrecl
VLRECL   DC    AL4(80)
*
KBLKSZ   DC    AL2(INMBLKSZ,1,L'VBLKSZ)     0030 optional blocksize
VBLKSZ   DC    AL4(23440)
*
KRECFM   DC    AL2(INMRECFM,1,L'VRECFM)     0049 recfm + pad
VRECFM   DC    X'9000'
*
KDIR     DC    AL2(INMDIR,1,L'VDIR)         000C dir blocks
VDIR     DC    XL3'000006'
*
VDSN     DC    AL2(INMDSNAM)                0002 optional dsname
         DC    AL2(0)                       # dsn qualifiers
KDSN     EQU   VDSN,4
L$MR02   EQU   *-MR02
*
         LTORG ,
         EJECT ,
*----------------------------------------------------------------------
*  Workarea
*----------------------------------------------------------------------
SAVEAREA DSECT ,
SASA     DS    18F           savearea for anyone we call
SARC     DS    F             most recent return code
SAREASON DS    X
*
SAKEYPL  DS    0D            XMITKEY parmlist
SA@BUF   DS    A
SAKEY1   EQU   *
SA@UTILN DS    A             addr of UTILITY NAME key info
SA@SIZE  DS    A                     DATASET SIZE
SA@DSORG DS    A                     DSORG
SA@TYPE  DS    A                     TYPE
SA@LRECL DS    A                     LRECL
SA@BLKSZ DS    A                     BLKSIZE
SA@RECFM DS    A                     RECFM
SA@DIR   DS    A                     DIRECTORY BLOCKS
SA@DSN   DS    A                     DSN
SAKEYX   EQU   *-4,1         VL byte
*
SAKUTILN DC    AL2(INMUTILN,1,L'XUTILN)     1028 utility name
XUTILN   DC    C'IEBCOPY'
*
SAKSIZE  DC    AL2(INMSIZE,1,L'XSIZE)       102c approx file size
XSIZE    DC    XL4'BB60'
*
SAKDSORG DC    AL2(INMDSORG,1,L'XDSORG)     003C dsorg
XDSORG   DC    XL2'0200'
*
SAKTYPE  DC    AL2(INMTYPE,1,L'XTYPE)       8012 optional dataset type
XTYPE    DC    X'00'
*
SAKLRECL DC    AL2(INMLRECL,1,L'XLRECL)     0042 lrecl
XLRECL   DC    AL4(80)
*
SAKBLKSZ DC    AL2(INMBLKSZ,1,L'XBLKSZ)     0030 optional blocksize
XBLKSZ   DC    AL4(23440)
*
SAKRECFM DC    AL2(INMRECFM,1,L'XRECFM)     0049 recfm + pad
XRECFM   DC    X'9000'
*
SAKDIR   DC    AL2(INMDIR,1,L'XDIR)         000C dir blocks
XDIR     DC    XL3'000006'
*
SAKDSN   DS    AL2           DSN key
SAQUALS  DS    AL2           DSN # qualifiers
SADSNAM  DS    CL80          DSN count/data pairs built here
*
SACAML   CAMLST SEARCH,0,0,0
L$CAMLST EQU   *-SACAML
*
SAPRM1   DS    A             IEBCOPY OS-parm ptr
SAPRMOS  DS    H,CL100       IEBCOPY OS-parm
*----------------------------------------------------------------------
X02MR02  DS    0D            INMR02 segment
X02SEGL  DS    X             segment length
X02SEGF  DS    X             segment flag
X02SEGD  DS    XL253         beginning of segment data
         ORG   X02SEGD
X02ID    DS    C'INMR02'
X02NUM   DS    XL4           files # (relative 1)
         ORG   ,
         DS    0D
L$SA     EQU   *-SAVEAREA
*
         EJECT ,
         PRINT NOGEN
         DXSEG ,
         WAXMIT ,
         DCBD  DSORG=PS,DEVD=DA
L$DCB    EQU   *-IHADCB
*
JFCB     DSECT ,
         IEFJFCBN ,
L$JFCB   EQU   *-JFCB
*
DSCB1    DSECT ,
         IECSDSL1 (1)                  FORMAT-1 DSCB
L$DSCB1  EQU   *-DSCB1
XMIT02A  UFINI DXDX02A,L$SA            pseudo-register
         END   ,
