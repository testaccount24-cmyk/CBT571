RECVGSEG TITLE 'Get XMIT segment'
*
* Copyright 2001, 2002 James M. Morrison
*
*----------------------------------------------------------------------
* Things to do:
*----------------------------------------------------------------------
         U#SET FUNC=RECV
*----------------------------------------------------------------------
* Function: Returns a complete XMIT segment read from XMITIN, or EOF
*
*           XMITIN DCB is opened on the first call,
*           closed on EOF.
*
* Entry:  AMODE=24, ASC=PRIMARY, KEY=*, STATE=*
*
*         R0  =  bits 00:07 flags: RGET$... (defined in WARECV)
*                bits 08:31 currently unused
*
*         R1  =  currently ignored
*
* Exit:   R1  =  Address of segment (XMITSEG)
*                upon EOF, R1 = 0
*
* Abends: U0001 XMITIN open failed
*         U0002 internal error (R0 = code)
*
* Notes: RGSWA contains a buffer holding residual data, which
*        represents data not yet returned to the caller, to be
*        saved for a later call to RECVGSEG.
*----------------------------------------------------------------------
* R2     RGSWA (our workarea)
* R3     DCB
* R4     XMITSEG (not strictly necessary, only covers one instruction)
*
* R5     pointer to residual data within RGSBUF
* R6     RGSROFF   - offset to residual data within RGSBUF
*
* R7     SEGL      - segment length for segment being built in RGSSEG
* R8     scratch, pointer within RGSSEG where residual data is appended
* R9     scratch, RGSSL    - # segment bytes currently in RGSSEG
*
* R10    scratch (careful)
* R11    RCVWA
* R12    base reg
* R13    savearea/workarea
*----------------------------------------------------------------------
L$REC    EQU   80                           XMITIN LRECL
INTE$1   EQU   1                            internal errors
INTE$2   EQU   2
INTE$3   EQU   3
INTE$4   EQU   4
         TITLE ' '
RECVGSEG UPROC L=L$SA,ID=RGET
         STM   R0,R1,SAENTRY
         UDIAG 1,'GET enter'
         ICM   R2,15,RCV@GS                 find our workarea
         BNZ   NORMAL                       already init'd, go
*----------------------------------------------------------------------
*  Initialize RGSWA
*----------------------------------------------------------------------
         UDIAG 2,'GET: init RGSWA'
         LA    R2,RCVRGSWA
         USING RGSWA,R2
         UZERO (R2),L$RGSWA                 clear storage
         ST    R2,RCV@GS                    save ptr to our workarea
*----------------------------------------------------------------------
*  Initialize - null segment
*----------------------------------------------------------------------
NORMAL   DS    0H
         LA    R3,RGSDCB
         USING IHADCB,R3
         TM    SAR0B0,RGET$CLO              CLOSE order?
         BO    CLOSE                        yes, br
         LA    R4,RGSSEG                    segment being built
         USING XMITSEG,R4
         NI    RGSFLG1,255-RGS1FINI         no segment in RGSSEG
         SLR   R0,R0
         STH   R0,RGSSL                     zero bytes in segment
         XC    RGSSEG,RGSSEG                clear segment
*----------------------------------------------------------------------
*  Check for call past EOF
*----------------------------------------------------------------------
         TM    RGSFLG2,RGS2EOF              already hit EOF?
         BNO   CKDCB
         UDIAG 2,'GET EOF at entry'
         B     EXIT
*----------------------------------------------------------------------
*  Open XMITIN
*----------------------------------------------------------------------
CKDCB    DS    0H
         TM    DCBOFLG1,DCBOFOPN            dcb open?
         BO    DCBOPEN
*
         UDIAG 3,'GET opening XMITIN'
         MVC   RGSDCB(L$DCB),MODLDCB        copy model DCB macro
         MVC   RGSOPN(L$OPN),MODLOPN        copy model OPEN macro
         OPEN  ((R3),INPUT),MF=(E,RGSOPN)
         TM    DCBOFLG1,DCBOFOPN            opened?
         BO    DCBOPEN
*
         ULOG  'RECVGSEG: XMITIN DCB open error'
         UDIAG 0,'GET RGSWA',(R2),L$RGSWA
         MVI   SAREASON,1                   XMITIN DCB didn't open
         B     UABEND
*
DCBOPEN  DS    0H
         EJECT ,
*----------------------------------------------------------------------
*  Main loop - If no more residual data, read
*----------------------------------------------------------------------
*
*  Note it might be possible for the residual data to contain more
*  than one segment (or portions thereof), so we may leave RECVGSEG
*  with residual data still pending.
*
RESUME   DS    0H
         TM    RGSFLG1,RGS1FINI             seg complete?
         BO    EXIT                         yes, return to caller
*
         TM    RGSFLG1,RGS1RES              residual data?
         BNO   READ                         no, need to get data
         EJECT ,
*----------------------------------------------------------------------
*  Copy residual data to segment return area (RGSSEG).
*----------------------------------------------------------------------
COPY     DS    0H
         LH    R6,RGSROFF                   offset to residual data
         LA    R5,RGSBUF(R6)                @ residual data
*
         LA    R0,INTE$1                    internal error #
         LA    R10,L$REC                    XMITIN LRECL
         SR    R10,R6                       # residual data bytes
         BNP   DIE
*
         LH    R8,RGSSL                     # bytes in RGSSEG already
         LR    R9,R8
         AR    R9,R10
         LA    R8,RGSSEG(R8)                @ next seg byte to append
*
         UDIAG 9,'GET: <COPY> regs',RCVREGS,16*4,REGS=YES
*
         BCTR  R10,0
         EX    R10,COPYRES                  copy residual to segment
         LA    R10,1(,R10)
         STH   R9,RGSSL                     new # bytes in RGSSEG
*
*  It is now safe to examine SEGL, since the above code copied at
*  least one byte to RGSSEG, so no matter what else, SEGL is valid.
*
         SLR   R7,R7
         IC    R7,SEGL                 segment length
*
         UDIAG 9,'GET: <COPY> seg.segl',RGSSEG,(R7)
         B     CKSEG
*
COPYRES  MVC   0(*-*,R8),0(R5)
         EJECT ,
*----------------------------------------------------------------------
*  Determine if the segment is now complete
*----------------------------------------------------------------------
CKSEG    DS    0H
         CR    R7,R9                   seglen : bytes in seg
         BL    SCR                     segment   complete,    residual
         BE    SCNR                    segment   complete, no residual
*
*  The segment is not yet complete, and we've consumed all of
*  the residual data; get some more
*
SINR     DS    0H                           seg incomplete, no residual
         NI    RGSFLG1,255-RGS1RES
         SLR   R6,R6
         STH   R6,RGSROFF
         XC    RGSBUF,RGSBUF
         UDIAG 5,'GET SINR',RCVREGS,16*4,REGS=YES
         B     READ                         finish segment
*
*  The segment is now complete, but ... there's some residual
*  data we need to reclaim from the RGSSEG
*
SCR      DS    0H                           segment complete, residual
         UDIAG 5,'GET SCR1',RCVREGS,16*4,REGS=YES
         SR    R9,R7                   # bytes residual data remaining
         OI    RGSFLG1,RGS1FINI+RGS1RES         seg complete
         LA    R6,L$REC
         SR    R6,R9                        new residual data offset
         STH   R6,RGSROFF                   new resoff
         UDIAG 5,'GET SCR2',RCVREGS,16*4,REGS=YES
         B     EXIT
*
*  The segment is now complete, and exactly consumed the residual
*  data
*
SCNR     DS    0H                           seg complete, no residual
         OI    RGSFLG1,RGS1FINI                 seg complete
         NI    RGSFLG1,255-RGS1RES              no residual
         SLR   R6,R6
         STH   R6,RGSROFF
         XC    RGSBUF,RGSBUF
         UDIAG 5,'GET SCNR',RCVREGS,16*4,REGS=YES
         B     EXIT
*
DIE      STM   R0,R15,RCVREGS
         UPSR  0,'RECVGSEGinternal error',(R0)
         UDIAG 0,'RECVGSEGregs',RCVREGS,16*4
         MVI   SAREASON,2
UABEND   UABEND SAREASON
*
         EJECT ,
*----------------------------------------------------------------------
*  Read input record from XMITIN
*----------------------------------------------------------------------
*
*  We're not allowed to read new data until we've drained RGSBUF
*  Likewise, reading past EOF seems excessively dense
*
READ     DS    0H
         LA    R0,INTE$2
         TM    RGSFLG1,RGS1RES              residual data?
         BO    DIE
*
         LA    R0,INTE$3
         TM    RGSFLG2,RGS2EOF              already hit EOF?
         BO    DIE
*
         LR    R10,R13                      save workarea ptr
         LA    R13,SADMSA                   provide data mgt savearea
         GET   (R3),RGSBUF                  read record
         LR    R13,R10                      restore workarea ptr
         TM    RGSFLG2,RGS2EOF              EOF?
         BO    ENDOFILE
*
         UDIAG 4,'GET: GET record',RGSBUF,L'RGSBUF
*
*  Indicate residual data exists, restart residual code
*
         SLR   R6,R6
         STH   R6,RGSROFF                   offset = 0
         OI    RGSFLG1,RGS1RES              residual data valid
         B     RESUME                       continue building segment
         EJECT ,
*----------------------------------------------------------------------
* End Of File - XMITIN EODAD routine
*----------------------------------------------------------------------
EOFRTN   DS    0H
         OI    RGSFLG2,RGS2EOF              XMITIN EOF
         BR    R14
*----------------------------------------------------------------------
*  End Of File
*----------------------------------------------------------------------
ENDOFILE DS    0H
         UDIAG 3,'GET: EOF, closing XMITIN'
CLOSE    DS    0H
         TM    DCBOFLGS,DCBOFOPN            DCB open?
         BNO   CLOSEX
         MVC   RGSCLOS(L$CLOS),MODLCLOS     copy model CLOSE macro
         CLOSE ((R3),),MF=(E,RGSCLOS)
CLOSEX   DS    0H
         TM    SAR0B0,RGET$CLO              CLOSE order?
         BO    EXIT                         yes, br
         TM    RGSFLG1,RGS1FINI             segment complete?
         BO    EXIT                         fine, done
*
         ICM   R10,3,RGSSL
         BZ    EXIT
*
         UDIAG 3,'GET incomplete seg at EOF',RGSSEG,L'RGSSEG
         EJECT ,
*----------------------------------------------------------------------
*  Return segment or EOF to caller
*----------------------------------------------------------------------
EXIT     DS    0H                           return code already set
         UDIAG 9,'GET: partial RGSWA at exit',(R2),L$RGSNAP
         UDIAG 1,'GET exit'
         SLR   R1,R1                        assume EOF, R1 = 0
         TM    RGSFLG1,RGS1FINI             valid segement to return?
         BNO   EXIT99
         LA    R2,RGSSEG                    R1 @ returned segment
         SLR   R14,R14
         IC    R14,0(,R2)
         UDIAG 2,'GET returned segment',(R2),(R14)
         LR    R1,R2                        R1 @ returned segment
EXIT99   UPEND R1=PASS,RC=0                 return R1
         EJECT ,
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
MODLOPN  OPEN  (,),MF=L                model OPEN
L$OPN    EQU   *-MODLOPN               l' model open
*
MODLCLOS CLOSE (,),MF=L                model CLOSE
L$CLOS   EQU   *-MODLCLOS              l' model close
*
MODLDCB  DCB   DDNAME=XMITIN,                                          +
               EODAD=EOFRTN,                                           +
               MACRF=GM,DSORG=PS,RECFM=FB,                             +
               LRECL=80
L$DCB    EQU   *-MODLDCB
*
         LTORG ,
         EJECT ,
*----------------------------------------------------------------------
*  Savearea/workarea
*----------------------------------------------------------------------
SAVEAREA DSECT ,
SA       DS    18F
SADMSA   DS    18F                     Data Management savearea
SAENTRY  DS    2F                      R0:R1 at entry
SAR0B0   EQU   SAENTRY+00,1            high byte of R0 - options
*
SAREASON DS    X                       UABEND reason code
SAEND    DS    0D
L$SA     EQU   *-SAVEAREA
         EJECT ,
         DXSEG ,
         PRINT NOGEN
         WARECV ,
         DCBD  DSORG=PS,DEVD=DA
RECVGSEG UFINI DXDRGET,L$SA
         END   ,
