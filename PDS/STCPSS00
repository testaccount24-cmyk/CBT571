STCPSS00 TITLE 'TCP/IP subsystem initialization'
*
* Copyright 2002 James M. Morrison
*
*----------------------------------------------------------------------
*  To do:
*  1) We should check to see if SGD, SQH, SSVT already allocated
*     before we allocate them (so they can be freed once we've
*     swapped new for old areas); enables dynamic changes to areas
*  2) Need to save @, length of allocated storage (I think some of
*     this has already been done); SGD is not such a bad place to
*     stuff these values, as they can possibly have longer duration
*     than the TCP/IP addr space
*  3) The code that deals with function code in LPA is incomplete
*     At the moment, there is no code in LPA, so it doesn't matter much
*  4) Review subpool choices
*  5) Memory leaks when TCP/IP restarted .... no big deal right now
*     But, that will change once TCP/IP starts becoming useful
*----------------------------------------------------------------------
         U#SET FUNC=STCP
*----------------------------------------------------------------------
* Function:    Initializes TCP/IP subsystem
*
*              Also contains FINDSSCT entry point that scans
*              SSCVT chain for TCP/IP subsystem
*
* Environment: MVS builds our SSCVT due to our subsystem being listed
*              in the IEFJSSNT module
*
*              The STCPINIT routine is called by MVS when the
*              TCP/IP subsystem's SSCVT is built
*
*              STCPINIT specifies that the primary JES will
*              provide support, so our STC proc can use SYSIN
*              and SYSOUT datasets
*
*              STCPINIT does not build any control blocks (such
*              as our SSVT, SGD, and SQH), nor does it load
*              any modules; that's our job
*
*
* Entry:  no parms, supervisor state, key 8
*         Options module name is assembled in CSECT at bottom
*
* Exit:   R15 =  0 - OK; supervisor state, key 8
*
* Notes:
*
*
* IBM Documentation:
*
* Order Number Title
* ------------ -----------------------------------------
*
* SR20-4675-01 A Guide to Using Multiple Virtual Storage
*              Interface Facilities (Student Text)
*              Second Edition, September 1981
*
*      Chapter 6, Subsystem Interface
*
* GC28-0627-02 OS/VS2 MVS System Programming Library: Job Management
*              VS2 Release 3.8
*              Third  Edition, October   1978
*
*      Chapter 9, Updating the Subsystem Names Table - IEFJSSNT
*
*
* Data Areas:
*
* Anchor   Area  Creator  Macro
* -------- ----- ------   --------
*
* CVTPTR   CVT   SYSGEN   CVT       Communications Vector Table
* CVTJESCT JESCT SYSGEN   IEFJESCT  JES Control Table
* JESSSCT  SSCVT IEFJSINT IEFJSCVT  Subsys Communication Vector Table
* SSCTSCTA SSCVT    "     IEFJSCVT  next SSCVT
* SSCTSSVT SSVT  SUBSYS   IEFJSSVT  Subsystem Vector Table
*
* Areas created by SYSGEN are nucleus-resident, Key 0
* SSCVT - Subpool 241 (CSA), Key 0
*
*
* Source code:
*
* SYM11 IEFJSSNT - SYS1.LINKLIB(IEFJSSNT) Subsystem Names Table
*                  Subsystems not defined at Sysgen time
*
* SYM11 IEFJSINT - Subsystem initialization interface
*                  Builds all SSCVTs, builds Master Scheduler SSVT
*
* SYM11 IEEMB860 - Initializes SSVTs named in IEFJSSNT by calling
*                  the subsystem initialization routine
*                  See SUBSINIT, LINKINIT routines in IEEMB860
*
*----------------------------------------------------------------------
*
         WASTCP ,                      TCP/IP common
*
ERR#1    EQU   1        unable to locate subsystem SSCVT
ERR#2    EQU   2        too many subsys function routines
*
*  Subpools allocated by STCPSS00:
*
*  Subpool 241: CSA, system-oriented, pageable, user protect key (0),
*               not fetch protected
*
POOL1    EQU   241      CSA - SGD, SQH, SSVT
POOL2    EQU   241      CSA - subsys functions
POOL3    EQU   241      CSA - SVC
*
*----------------------------------------------------------------------
STCPSS00 UPROC ID=SS00,L=L$SA
         USING PSA,0
*----------------------------------------------------------------------
*  Load options module
*----------------------------------------------------------------------
OPTIONS  DS    0H
         L     R1,=A(STCPOPTN)         @ name of options module
         ST    R1,SAEPLOC1
         BAL   R10,LOADMOD             load options or ABEND
         STM   R0,R1,SALOAD1
         LTR   R8,R0                   @ options module
         BNZ   *+8                     find TCP/IP subsys SSCVT
         L     R8,XTLMSBAA-XTLST(,R1)  @ options module in LPA
         USING OPT,R8
*----------------------------------------------------------------------
*  Find our SSCVT
*----------------------------------------------------------------------
         MVC   STPSSN,OPTSSN           save subsys name
         LA    R15,FINDSSCT            SSCVT scan routine
         BALR  R14,R15                 find our SSCVT
         MVI   SAREASON,ERR#1          can't find SSCVT
         LTR   R9,R1                   found SSCVT?
         BZ    DIE
         ST    R9,SA@SSCVT             save our SSCVT ptr
         UPSR  2,'SS00 SSCVT',(R9)
*----------------------------------------------------------------------
*  Allocate SGD, SQH, SSVT
*----------------------------------------------------------------------
ALCSGD   DS    0H
         LA    R0,STCP#SSF*4           highest function code * L' A-con
         A     R0,=A(L$SGD+L$SQH+SSVTFSIZ)  1st CSA alloc length
         ST    R0,SALCSA1
         SPKA  0
         GETMAIN RU,LV=(0),SP=POOL1    alloc SGD, SQH, SSVT
         LR    R7,R1
         USING SGD,R7
         LA    R6,L$SGD+SGD            SQH  immediately follows SGD
         LA    R5,L$SQH+SQH            SSVT immediately follows SQH
         STM   R5,R7,SA@SGD3           @ SSVT, SQH, SGD
         UPSR  2,'SS00 SGD',(R7)
         UPSR  2,'SS00 SQH',(R6)
         UPSR  2,'SS00 SSVT',(R5)
*----------------------------------------------------------------------
*  Initialize SGD, SQH
*----------------------------------------------------------------------
         XC    SGD(L$SGD),SGD          clear SGD
         MVC   SGDID,=C'SGD'           block id
         MVC   SGDOPTS(SGDOPL1),OPT    copy options to SGD
         MVC   STPCUU,SGDCUU           set default 3088 cuu for STCPOPR
         L     R0,SALCSA1
         ST    R0,SGDLCSA1             tell STCPSS99 about GETMAIN
         MVI   SGDLCSA1,POOL1               and subpool #
*
         XC    SQH(L$SQH),SQH          clear SQH
         MVC   SQHID,=C'SQH'           block id
         MVC   SQHSLIM,OPTSLIM         max SEND queued elements
         MVC   SQHRLIM,OPTRLIM         max RECV queued elements
         ST    R6,SGD@SQH              @ SQH
         SPKA  8*16
*
         L     R1,SAEPLOC1
         BAL   R10,DELMOD              release options module
         DROP  R8                      R7 @ SGD, SQH, SSVT
         EJECT ,
*----------------------------------------------------------------------
*  Load subsys function code to CSA, or locate in LPALIB
*
*  MVS38j doesn't have load-to-global support, so we have to fake it
*
*  The contents of LPALIB module are split between the SSVT and
*  the second chunk of CSA
*  There's an address list at the front of the module, which is
*  used to build our SSVT; the addr list is terminated by A(0)
*  The remainder of the module is subsystem function code
*----------------------------------------------------------------------
*
* R4           @ gotten CSA storage to contain subsys function code
* R5           length of CSA area for subsys function code
* R7   SGD, SQH, SSVT
* R8           @ subsys function code module (CSA or LPA)
* R9           length of module copied for subsys function code
*
LOADFCN  DS    0H
         LA    R1,SGDMOD1              @ ss function code module name
         ST    R1,SAEPLOC2
         SLR   R2,R2                   indicate no CDE
         BAL   R10,LOADMOD             load subsys function code module
         STM   R0,R1,SALOAD2
         LTR   R8,R0                   @ module
         BNZ   LFCOPY                  module not in LPA; copy it
*
*  Found module in LPA
*
         USING XTLST,R1                @ module's XTLST; R2 @ CDE
         L     R8,XTLMSBAA             @ module in LPA
         ST    R8,SA@PROTO
         L     R0,0(,R8)               @ code
         ST    R0,SA@SSFN
         SLR   R5,R5
         ICM   R5,7,XTLMSBLN           length of module in LPA
         ST    R5,SALSSFN
         SLR   R4,R4                   zero value = no GETMAIN
         UDIAG 4,'SS00 load2 LPA',(R8),(R5)
         B     LFCALC                  calc length of addr list
         DROP  R1
*----------------------------------------------------------------------
*  Load subsys function code to CSA (fake load-to-global)
*----------------------------------------------------------------------
LFCOPY   DS    0H
         LA    R8,0(,R8)               clear hi even tho it's 0 to
         ST    R8,SA@PROTO             assure pointer arithmetic ok
         LR    R5,R1                   module length in doublewords
         SLL   R5,8+3                  remove APF code
         SRL   R5,8                    module length in bytes
         LR    R4,R1                   nonzero value = GETMAIN
         UDIAG 4,'SS00 load2 private',(R8),(R5)
*
*  Delimit the address list from the code in the module
*  First A-con in the address list * must * point past all A-cons
*
LFCALC   DS    0H
         L     R14,0(,R8)              @ start of code in private/LPA
         LA    R14,0(,R14)             clear hi
         ST    R14,SA@CODE2
         SR    R14,R8                  length of A-con list
         ST    R14,SALPROTO
         SR    R5,R14                  minus length of A-con list
         ST    R5,SALCODE2             length of load2 code
         LTR   R4,R4
         BZ    BUILDSVT
*
         SPKA  0
         GETMAIN RU,LV=(R5),SP=POOL2   CSA for "LPA" module
         LR    R4,R1
         STM   R4,R5,SA@CSA2           @, length of sys func module
         MVI   SALSSFN,POOL2           save subpool #
         ST    R4,SGD@SSFN             tell STCPSS99 GETMAIN addr
         ST    R5,SGDLSSFN             tell STCPSS99 GETMAIN len
         MVI   SGDLSSFN,POOL2                                subpool #
*
         L     R8,SA@CODE2             @ code to copy; ignore addr list
         LR    R9,R5                   source length
         MVCL  R4,R8                   copy subsys functions to CSA
*
         LM    R2,R3,SA@CSA2
         LA    R3,0(,R3)               remove subpool #
         UDIAG 4,'SS00 load2 CSA',(R2),(R3)
         EJECT ,
*----------------------------------------------------------------------
*  Build SSVT from address list at front of the module
*
*  The A-cons have a function code number in their high byte
*  (this is MVS38j, 24 bits of addressability is it, not 31)
*
*  The number of functions should be right, as long as the address
*  lists' function codes end with the highest valid function code
*  in the last A-con
*----------------------------------------------------------------------
BUILDSVT DS    0H
         LA    R7,SVT                  @ SSVT
         USING SSVT,R7
*
*  When the subsys function code is already in LPA, R9=R10
*  so the net relocation is zero
*
         L     R3,SALPROTO             length of address list
         L     R8,SA@PROTO             @ address list
         LR    R9,R8                   save for relocation factor
         L     R10,SA@SSFN             @ function code CSA/LPA
         SR    R10,R3                  @ CSA/LPA addr list
*
         SRL   R3,2                    = # A-con entries
         BCTR  R3,0                    less one for A(0)
         XC    SSVTFCOD(256),SSVTFCOD        clear func code matrix
         XC    SSVTFRTN(STCP#SSF*4),SSVTFRTN clear function ptrs
         SLR   R4,R4                   # function codes if none
         SLR   R6,R6                   SSVTFRTN offset
         LA    R2,1                    SSVTFRTN subscript (relative 1)
*
BSLOOP   DS    0H
         L     R5,0(,R8)               @ function code
         UPSR  6,'SS00 bsloop-a @ A-con',(R8)
         UPSR  6,'SS00 bsloop-b A-con',(R5)
         LTR   R5,R5                   end of list?
         BZ    BSFIN
         SLR   R4,R4                   will contain function code
         SLDL  R4,8                    R4(24:31) <- R5(00-07)
         C     R4,=A(STCP#SSF)         function code too high?
         BH    BSERR
         SRL   R5,8                    cleaned hi byte
         SR    R5,R9                   relative to module begin
         AR    R5,R10                  relative to CSA2
         UPSR  6,'SS00 bsloop-c relocated',(R5)
         ST    R5,SSVTFRTN(R6)         @ function support code
         STC   R2,SSVTFCOD-1(R4)       set ss function rtn subscript
         LA    R2,1(,R2)               next SSVTFRTN subscript
         LA    R6,4(,R6)               @ next SSVTFRTN
         LA    R8,4(,R8)               @ next A-con
         BCT   R3,BSLOOP
*
         SLR   R0,R0
         C     R0,0(,R8)               end-of-list just in time?
         BE    BSFIN
BSDIE    UWTO  0,'TCP/IP subsys/SVC install error'
         MVI   SAREASON,ERR#2          # functions exceeds STCP#SSF
         B     DIE
*
BSERR    DS    0H
         UPSR  0,'TCP/IP function code too large',(R4)
         B     BSDIE
*
BSFIN    ST    R4,SSVTFNUM-2           last function code + reserved
         SPKA  8*16
         EJECT ,
*----------------------------------------------------------------------
*  Load/locate SVC
*
*  SVCs must be either part of the resident control program (in the
*  nucleus), or in fixed or pageable LPA
*  This code will fail if the SVC is in the nucleus
*----------------------------------------------------------------------
LOADSVC  DS    0H
         L     R7,SA@SGD               @SGD
         USING SGD,R7
         LA    R1,SGDMOD3              @ SVC module name
         ST    R1,SAEPLOC3
         BAL   R10,LOADMOD             load SVC module
         STM   R0,R1,SALOAD3
         LTR   R4,R0                   @ loaded module or 0=fnd in LPA
         BZ    LSEXISTS                br; module in LPA - SVCTABLE ok
*
*  SVC module was loaded (not in LPA); perform load-to-global
*
         LR    R5,R1                   module length in doublewords
         SLL   R5,8                    remove APF code
         SRL   R5,8-3                  length of module in private
*
         SPKA  0
         GETMAIN RU,LV=(R5),SP=POOL3   for "LPA" module
         LR    R14,R1                  gotten storage addr
         ST    R14,SGD@SVC             tell STCPSS99 GETMAIN addr
         ST    R5,SGDLSVC              tell STCPSS99 GETMAIN len
         MVI   SGDLSVC,POOL3                and subpool #
         LR    R15,R5                  gotten storage length
         STM   R14,R15,SA@CSA3         save @, length
         MVCL  R14,R4                  copy SVC to CSA from private
         SPKA  8*16
*
         SLR   R0,R0
         IC    R0,SGDSVC#              user's SVC # choice
         L     R1,SA@SVC               @ SVC entry point
         ST    R1,STP@SVC
         UCALL STCPSVC0                steal SVCTABLE entry
*
         L     R1,SAEPLOC3
         BAL   R10,DELMOD              release module storage
LSEXISTS DS    0H
         EJECT ,
*----------------------------------------------------------------------
*  FINISH - SSCVT, SGD, SQH, SSVT, subsys functions, and SVC
*----------------------------------------------------------------------
FINISH   DS    0H
         L     R9,SA@SSCVT             @ SSCVT
         USING SSCT,R9
         ST    R9,STP@SSCT
         L     R6,SA@SSVT              @ SSVT
         ST    R6,STP@SSVT
         L     R7,SA@SGD               @ SGD
         ST    R7,STP@SGD
         L     R8,SA@SQH               @ SQH
         ST    R8,STP@SQH
*
         SPKA  0
         ST    R7,SSCTSUSE             SSCVT user field -> SGD
         ST    R6,SSCTSSVT             SSCVT -> SSVT
         UDIAG 3,'SS00 SSCVT',(R9),SSCTSIZE
         SPKA  8*16
         UWTO  0,'TCP/IP subsys initialized'
*
         SLR   R0,R0
         SLR   R1,R1
         UCALL U370QSS                 debug aid - show SS info
*
         SPKA  0
         UDIAG 4,'SS00 exit SGD',(R7),L$SGD
         UDIAG 4,'SS00 exit SQH',(R8),L$SQH
         UDIAG 4,'SS00 exit SSVT',(R6),SSVTFSIZ+(STCP#SSF*4)
         LM    R2,R3,SA@CSA2
         UDIAG 5,'SS00 exit CSA2',(R2),(R3)
         LM    R2,R3,SA@CSA3
         UDIAG 5,'SS00 exit CSA3',(R2),(R3)
         SPKA  8*16
*
         UDIAG 6,'SS00 exit SA',(RSA),L$SA
*----------------------------------------------------------------------
*  Return to caller
*----------------------------------------------------------------------
         UPEND ,                       return to caller
*----------------------------------------------------------------------
DIE      UABEND SAREASON               bye bye
         EJECT ,
*----------------------------------------------------------------------
*  LOADMOD  - Scan LPA for requested module, if not found then load
*             module into private area
*
*  Returns:  if module already in LPA
*                 R0=0
*                 R1 @ XTLST
*                 R2 @ major CDE
*
*            if module loaded to private - LOAD SVC regs as below
*            LOAD SVC (SYM11 IEAVLK00.IGC008) returns:
*                 R0  address of module
*                 R1  00:07  APF code
*                     08:31  module length in doublewords
*----------------------------------------------------------------------
LOADMOD  DS    0H
         STM   R6,R11,SALOW
         L     R6,CVTPTR
         LR    R7,R11                  IEAQCDSR may modify R11
         L     R8,CVTQLPAQ-CVT(,R6)    @ LPA CDE list
         LR    R9,R1                   @ module name
         L     R15,CVTQCDSR-CVT(,R6)   SYM11 IEAVLK00.IEAQCDSR
         BALR  R14,R15                 scan CDE chain
         B     LOADFND                 +0 found; +4 not found
         LR    R11,R7                  restore in case of ABEND
         LOAD  EPLOC=(R9)              load module or ABEND
         LM    R6,R11,SALOW
         BR    R10                     return R0, R1
*
LOADFND  DS    0H                      R11 @ CDE
         LR    R1,R11                  save CDE ptr
         LR    R11,R7                  restore
         USING CDENTRY,R1
         LR    R2,R1                   assume major CDE
         TM    CDATTR,CDMIN            minor CDE?
         BNO   *+8                     no, br
         L     R2,CDXLMJP              @ major CDE
         L     R1,CDXLMJP-CDENTRY(,R2) @ XTLST
         SLR   R0,R0                   indicate module already loaded
         LM    R6,R11,SALOW
         BR    R10                     return R0, R1, R2
         DROP  R1
*----------------------------------------------------------------------
*  DELMOD - Delete module from private area
*----------------------------------------------------------------------
DELMOD   DS    0H
         DELETE EPLOC=(1)              release module storage
         BR    R10
         EJECT ,
*----------------------------------------------------------------------
*  FINDSSCT - attempts to locate TCP/IP subsystem SSCVT and SGD
*----------------------------------------------------------------------
*  May use caller's savearea (doesn't currently)
*
*  Entry:    Enabled or disabled
*            Supervisor or Problem state
*            Key 8 or 0
*
*            R11 @ WASTCP
*            R13 @ standard OS savearea (18 fullwords)
*            R14 return address
*            R15 @ FINDSSCT
*            STPSSN contain subsystem name
*
*  Exit:     Same enablement, state, and key as entered
*
*            Found: R0 @ SGD
*                   R1 @ SSCVT
*                   R15 = 0
*
*            Found: R0 @ 0      SSCTSUSE = 0 (no SGD)
*                   R1 @ SSCVT
*                   R15 = 4
*
*            Not:   R0 = 0
*                   R1 = 0
*                   R15 = 8
*----------------------------------------------------------------------
         PUSH  USING
         DROP  ,
         USING STCPWA,RSTCP
         USING FINDSSCT,R15
         ENTRY FINDSSCT
FINDSSCT DS    0H
         SLR   R0,R0                   assume SSCVT not found
         L     R1,CVTPTR               @ CVT
         L     R1,CVTJESCT-CVT(,R1)    @ JESCT
         L     R1,JESSSCT-JESCT(,R1)   @ 1st SSCVT (JES2)
         USING SSCT,R1
FSLOOP   CLC   SSCTSNAM,STPSSN         same subsys name?
         BE    FSFOUND                 found, return
*
         ICM   R1,15,SSCTSCTA          @ next subsys
         BNZ   FSLOOP
         LA    R15,8                   no SSCVT found; rc = 8
         BR    R14                     return R0 = 0, R1 = 0
*
FSFOUND  DS    0H
         L     R0,SSCTSUSE-SSCT(,R1)   @ SGD
         LTR   R0,R0
         BZ    FSNOSGD                 br, no SGD ptr
         SLR   R15,R15                 found SSCVT & SGD; rc = 0
         BR    R14                     return R0 @ SGD, R1 @ SSCVT
*
FSNOSGD  DS    0H
         LA    R15,4                   SSCVT but no SGD; rc = 4
         BR    R14                     return R0 = 0, R1 @ SSCVT
         POP   USING
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
         LTORG ,
SAVEAREA DSECT ,
SASA     DS    18F
*
SALOAD1  DS    2F                      return parms from 1st LOAD
SAEPLOC1 DS    A                       @ name of 1st module loaded
SALOAD2  DS    2F                      return parms from 2nd LOAD
SAEPLOC2 DS    A                       @ name of 2nd module loaded
SALOAD3  DS    2F                      return parms from 3rd LOAD
SAEPLOC3 DS    A                       @ name of 3rd module loaded
*
SA@SSVT  DS    A                       @ SSVT
SA@SQH   DS    A                       @ SSVT
SA@SGD   DS    A                       @ SGD
SA@SGD3  EQU   SA@SSVT,12              1st CSA alloc - SGD, SQH, SVT
SALCSA1  DS    F                       length of 1st CSA allocation
SA@CSA1  EQU   SA@SGD,8                1st CSA alloc - SGD, SQH, SVT
*
SA@PROTO DS    A                       @ loaded module = proto-SVT
SALPROTO DS    F                       length of proto-SVT
SA@CODE2 DS    A                       load2 code addr (past proto)
SALCODE2 DS    A                       load2 code length
*
SA@SSFN  DS    A                       @ func code addr list
SALSSFN  DS    F                       length of function code's CSA
SA@CSA2  EQU   SA@SSFN,8               2nd CSA alloc - subsys functions
*
SA@SVC   DS    F                       addr   of SVC's CSA
SALSVC   DS    F                       length of SVC's CSA
SA@CSA3  EQU   SA@SVC,8                3nd CSA alloc - SVC
*
SA@SSCVT DS    A                       @ SSCVT
SALOW    DS    6F                      low level subroutine SA
SAREASON DS    X
         DS    0D
L$SA     EQU   *-SAVEAREA
*
OPT      STCP#OPT SECT=DSECT           subsys options module layout
*
         DSSSGD SECT=DSECT             subsys global data
         DSSSQH SECT=LABEL             subsys queue headers
         DSSSVT SECT=LABEL             subsys SSVT
L$CSA1   EQU   *-SGD
*
         PRINT NOGEN
         IHAPSA ,
         CVT   DSECT=YES,LIST=NO
         IEFJESCT ,                    JESCT
         IEFJSCVT ,                    SSCVT
         IEFJSSVT ,                    SSVT
         IHACDE ,                      CDE
         IHAXTLST ,                    XTLST
STCPSS00 UFINI DXDSSS00,L$SA
*----------------------------------------------------------------------
STCPOPTN CSECT ,
         STCP#OPT ID=NAME              generate CL8 options module name
         END   ,
