XMIT02B  TITLE 'WRITE INMR02 INMCOPY segment'
*
* Copyright 2001, 2002 James M. Morrison
*
*----------------------------------------------------------------------
*  To do: NO
*----------------------------------------------------------------------
         U#SET FUNC=XMIT
*----------------------------------------------------------------------
* Function: Collect the information for, and write the
*           INMR02 INMCOPY segment for DSORG=PS or DSORG=PO datasets.
*
*           For DSORG=PO datasets, XMIT02A has already written the
*           INMR02 IEBCOPY segment.
*
*           For DSORG=PS datasets, XMIT02A wasn't called;
*           no INMR02 IEBCOPY segment is needed.
*
* Caller: XMITUNLD
*
* Entry:
*         R0  =
*         R1  =
*
* Exit:   R15 = return code
*         R15 = 00 success
*
* Abends:
*
* Notes: XMITUNLD calls us for either DSORG=PO or DSORG=PS datasets.
*        For DSORG=PO, XMIT02A has already unloaded the PDS using
*        IEBCOPY, closed the PDS's DCB, and opened the DCB for
*        IEBCOPY's unloaded dataset (as well as gotten the JFCB).
*
*        For DSORG=PS, XMIT370 has opened the input dataset, and
*        gotten the JFCB.  XMIT370 has the wrong DCB attributes for
*        a DSORG=PS dataset, since it assumes the SYSUT1 dataset will
*        be a PDS.  For DSORG=PS, we have to reopen the DCB with the
*        correct values.
*----------------------------------------------------------------------
* R2     DCB
* R3     JFCB
* R4
* R5
* R6
* R7
* R8
* R9
* R10
* R11    XMTWA
* R12    base reg
* R13    savearea
*----------------------------------------------------------------------
ERR#1    EQU   1        SYSUT1 re-OPEN error
         TITLE ' '
*----------------------------------------------------------------------
XMIT02B  UPROC L=L$X02BWA,ID=X02B,WA=X02BWA,INIT=MVCL
         UDIAG 1,'XMIT02B enter'
*----------------------------------------------------------------------
* Create INMR02 segment's key data
*----------------------------------------------------------------------
         MVI   X02SEGL,L$X02SGL                        segment length
         MVI   X02SEGF,SEG$1+SEG$L+SEG$C               segment flags
         MVC   X02ID,=C'INMR02'
         MVC   X02NUM,=AL4(1)          applies to file number 1
         MVC   X02KEY(L$MR02),MR02     copy bogus key data
*
* Update bogus data with (some) correct information
*
         L    R3,XMT@JFCB            SYSUT1/SYSUT2 JFCB
         USING JFCB,R3
         MVC   XSIZE,XMTESZ          estimated file size
         MVC   XDSORG,JFCDSORG       dsorg
         MVC   XLRECL+2(2),JFCLRECL  lrecl
         MVC   XRECFM(1),JFCRECFM    recfm
         MVI   XRECFM+1,2            INMCOPY INMR02's seem to have it
         MVC   XBLKSZ+2(2),JFCBLKSI  block size
*----------------------------------------------------------------------
* Write INMR02 segment
*----------------------------------------------------------------------
WRITE02  DS    0H
         LA    R1,X02MR02
         UCALL XMITPUT                 write INMR02 segment
*----------------------------------------------------------------------
* Determine whether the XMTDCBI DCB correctly reflects the SYSUT1
* dataset's attributes when DSORG=PS.  XMIT02A took care of the
* DCB for DSORG=PO.
*----------------------------------------------------------------------
         LA    R3,XMTJFCB1             SYSUT1 JFCB
         TM    JFCDSRG1,JFCORGPS       DSORG=PS?
         BNO   EXIT                    no, xmit02a already fixed DCB
*----------------------------------------------------------------------
* Close the SYSUT1 input dataset
*----------------------------------------------------------------------
CLOSE    DS    0H
         UDIAG 2,'XMIT02B close DSORG=PS SYSUT1'
         MVC   XMTCLOS(L$CLOS),MODLCLOS     copy model CLOSE macro
         CLOSE XMTDCBI,MF=(E,XMTCLOS)       close DSORG=PS SYSUT1
*----------------------------------------------------------------------
* Re-open SYSUT1 with correct DCB attributes
* We don't need to re-read the JFCB, since it hasn't changed since
* XMIT370 read it.
*----------------------------------------------------------------------
REOPEN   DS    0H
         LA    R2,XMTDCBI
         USING IHADCB,R2
         MVC   XMTOPN(L$OPN),MODLOPN     copy model OPEN macro
         MVC   XMTDCBI(L$DCBI),MODLDCBI  copy model DCB
         MVC   DCBRECFM,JFCRECFM         copy recfm from JFCB
         MVC   DCBLRECL,JFCLRECL         copy lrecl from JFCB
         MVC   DCBBLKSI,JFCBLKSI         copy blksize from JFCB
         UDIAG 3,'XMIT02B SYSUT1 reopen DCB',(R2),L$DCB
         OPEN  ((R2)),MF=(E,XMTOPN)
         TM    DCBOFLG1,DCBOFOPN            opened?
         BO    DCBIOPEN
         UDIAG 0,'XMIT02B: SYSUT1 OPEN error'
         MVI   SAREASON,ERR#1               SYSUT1 re-open error
         UABEND SAREASON                    input DCB didn't open
DCBIOPEN DS    0H
         UDIAG 3,'XMIT02B: SYSUT1 DCB open',(R2),L$DCB
*----------------------------------------------------------------------
* Return to caller with return code set
*----------------------------------------------------------------------
EXIT     DS    0H
         UPSR  1,'XMIT02B exit rc',*X02RC
         UPEND RC=*X02RC
         EJECT ,
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
MR02     DS    0X
         DC    AL2(INMUTILN,1,L'VUTILN)     1028 utility name
VUTILN   DC    C'INMCOPY'
*
         DC    AL2(INMSIZE,1,L'VSIZE)       102C approx file size
VSIZE    DC    XL4'BB60'
*
         DC    AL2(INMDSORG,1,L'VDSORG)     003C dsorg
VDSORG   DC    XL2'4000'
*
         DC    AL2(INMLRECL,1,L'VLRECL)     0042 lrecl
VLRECL   DC    XL4'C30'
*
         DC    AL2(INMBLKSZ,1,L'VBLKSZ)     0030 optional blocksize
VBLKSZ   DC    AL4(23440)
*
         DC    AL2(INMRECFM,1,L'VRECFM)     0049 recfm
VRECFM   DC    X'4800'
L$MR02   EQU   *-MR02
*
MODLDCBI DCB   DDNAME=SYSUT1,                                          +
               DSORG=PS,               DEFINITELY                      +
               LRECL=0,BLKSIZE=0,      FILLED in dynamically           +
               RECFM=F,                MAYBE, maybe not                +
               MACRF=R
L$DCBI   EQU   *-MODLDCBI
*
MODLOPN  OPEN  (,INPUT),MF=L           model OPEN
L$OPN    EQU   *-MODLOPN               l' model open
*
MODLCLOS CLOSE (,),MF=L                model CLOSE
L$CLOS   EQU   *-MODLCLOS              l' model close
         LTORG ,
         EJECT ,
*----------------------------------------------------------------------
*  Workarea
*----------------------------------------------------------------------
X02BWA   DSECT ,
X02SA    DS    18F
SAREASON DS    X
*
X02RC    DS    F             return code
X02MR02  DS    0D            INMR02 segment
X02SEGL  DS    X             segment length
X02SEGF  DS    X             segment flag
X02SEGD  DS    XL253         beginning of segment data
         ORG   X02SEGD
X02ID    DS    C'INMR02'
X02NUM   DS    XL4           files # (relative 1)
X02KEY   DS    0X            beginning of key data
         DC    AL2(INMUTILN,1,L'VUTILN)     1028 utility name
XUTILN   DC    C'INMCOPY'
         DC    AL2(INMSIZE,1,L'VSIZE)       102C approx file size
XSIZE    DC    XL4'BB60'
         DC    AL2(INMDSORG,1,L'VDSORG)     003C dsorg
XDSORG   DC    XL2'4000'
         DC    AL2(INMLRECL,1,L'VLRECL)     0042 lrecl
XLRECL   DC    XL4'C30'
         DC    AL2(INMBLKSZ,1,L'VBLKSZ)     0030 optional blocksize
XBLKSZ   DC    AL4(23440)
         DC    AL2(INMRECFM,1,L'VRECFM)     0049 recfm
XRECFM   DC    X'4800'
L$X02SGL EQU   *-X02MR02                    actual segment length
         ORG   ,
         DS    0D
L$X02BWA EQU   *-X02BWA
         EJECT ,
         PRINT NOGEN
         DXSEG ,
         WAXMIT ,
         DCBD  DSORG=PS,DEVD=DA
L$DCB    EQU   *-IHADCB
*
JFCB     DSECT ,
         IEFJFCBN ,
L$JFCB   EQU   *-JFCB
*
XMIT02B  UFINI DXDX02B,L$X02BWA
         END   ,
