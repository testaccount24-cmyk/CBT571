XMITCPR1 TITLE 'Fix IEBCOPY COPYR1 record'
*
* Copyright 2001, 2002 James M. Morrison
*
         PRINT  NOGEN
*
         DCBD   DSORG=PS,DEVD=DA
*
JFCB     DSECT ,
         IEFJFCBN ,
L$JFCB   EQU   *-JFCB
*
DSCB1    DSECT ,
         IECSDSL1 (1)                  FORMAT-1 DSCB
*
*  The following 'DX' definition(s) are to allow us to assemble on
*  either MVS38j or something more modern.  They echo the 'DS'
*  definitions in later MVS versions.
*
DX1SMSFG EQU   DS1DSNAM+X'4E',1          SMS indicators
DX1SCEXT EQU   DS1DSNAM+X'4F',3          secondary space extension
L$DSCB1  EQU   *-DSCB1
*
         PRINT GEN
         EJECT ,
         DXCOPYR1 BDW=YES,RDW=YES
XMITCPR1 CSECT ,
*----------------------------------------------------------------------
         U#SET FUNC=XMIT
*----------------------------------------------------------------------
* Function:    Given an MVS38j IEBCOPY unload COPYR1 record,
*              transform it to mimic higher levels of IEBCOPY.
*
*              Fields in the post-MVS38j section are filled in,
*              where possible, only if they are x'00's.
*
*              Modification of the COPYR1 record is controlled by
*              presence/absence of COPYR1 ddname.
*
* Caller: XMITUNLD (after INMR03 written)
*
* Entry:  R0 =
*         R1 = address of IEBCOPY COPYR1 record's BDW
*
*         XMTJFCB1 contains the SYSUT1 JFCB
*         XMTJFCB2 contains the SYSUT2 JFCB
*
* Exit:   R15 =  0     everything is OK
*                else  error
*
* Notes:
*
* COPYR1 notes:
*         The IEBCOPY program has changed the length and contents of
*         the COPYR1 record based on the maintenance level of IEBCOPY.
*
*         When the user wishes to create a COPYR1 record which doesn't
*         match the current level of IEBCOPY running on this system,
*         coding the COPYR1 DDNAME will cause this code to modify
*         the COPYR1 record before it's written to the XMIT.
*
*         Following are the values to code on the COPYR1 DDNAME
*         for various levels of IEBCOPY maintenance:
*
*         MVS38j      (RDW)  LRECL=56     payload: 52 bytes (x'34')
*         MVS/ESA     (RDW)  LRECL=60     payload: 56 bytes (x'38')
*
*         which is to say the LRECL= value specifies the length to
*         drop into the RDW, which is 4 greater than the payload's
*         (data following the RDW) length.
*
*         The DCB attributes are what are appropriate to RECEIVE the
*         XMIT file on the specified levels of MVS.  The COPYR1
*         allocation doesn't have to specify an actual dataset, it
*         can be DUMMY, as below:
*
*         //COPYR1  DD DUMMY,DCB=LRECL=xx
*
*         If no LRECL value is specified, XMITCPR1 will default
*         to the longest COPYR1 of which it is aware, which should
*         usually work pretty well.  In such a case, simply code
*
*         //COPYR1  DD DUMMY
*
*         Allowing the LRECL length to be coded might allow for
*         some future distinctions between further variations,
*         or possibly have use to someone modifying this code.
*         Plus it let me play with the length while I slog through
*         creating XMIT370's XMITs that TSO/E RECEIVE understands.
*----------------------------------------------------------------------
         TITLE ' '
*----------------------------------------------------------------------
* Register usage (except MODTAB code)
*----------------------------------------------------------------------
* R2     TIOT entry
* R3     DCB
* R4     JFCB
* R5
* R6     scratch
* R7     old COPYR1 record length
* R8     new COPYR1 record length
* R9     address of COPYR1 record (@ BDW)
* R10
*----------------------------------------------------------------------
XMITCPR1 UPROC ID=XCP1,L=L$SA,INIT=MVCL
         LR    R9,R1                        save caller's R1
         USING COPYR1,R9
         LH    R7,XC1BDW                    old COPYR1 BDW
         UDIAG 1,'CPR1 entry'
         UDIAG 3,'CPR1 entry COPYR1',(R9),(R7)
         UDIAG 4,'CPR1 entry XMTJFCB1',XMTJFCB1,L$JFCB
         UDIAG 4,'CPR1 entry XMTJFCB2',XMTJFCB2,L$JFCB
*----------------------------------------------------------------------
*  See if COPYR1 ddname allocated
*----------------------------------------------------------------------
         LA    R1,=CL8'COPYR1'         target DDNAME
         UCALL U370TIOT                scan TIOT for DDNAME
         LTR   R1,R1                   found?
         BNZ   FOUND                   yes
*
NOTFOUND DS    0H
         ULOG  'No COPYR1 ddname found, COPYR1 record unmodified'
         B     EXIT
         EJECT ,
*----------------------------------------------------------------------
*  COPYR1 ddname allocated, RDJFCB to retrieve LRECL=
*----------------------------------------------------------------------
FOUND    DS    0H
         LA    R3,SAVDCB
         USING IHADCB,R3
         MVC   SAVOPN(L$OPN),MODLOPN        copy model OPEN macro
         STCM  R3,7,SAVOPN+1                relocate DCB ptr
*
         MVC   SAVDCB(L$DCB),MYDCB          copy DCB
         LA    R0,SAVEXLST                  relocate DCB's EXLST
         STCM  R0,7,DCBEXLSA
*
         MVC   SAVEXLST(L$JFCBL),JFCBLST
         LA    R4,SAVJFCB                   relocate EXLST's JFCB addr
         USING JFCB,R4
         STCM  R4,7,SAVEXLST+1
*
         RDJFCB SAVDCB,MF=(E,SAVOPN)
         LTR   R15,R15
         BZ    SNAPJFCB
         UDIAG 0,'XMITCPR1 COPYR1 RDJFCB failed'
         UABEND ,
SNAPJFCB DS    0H
         UDIAG 3,'CPR1 COPYR1 JFCB',SAVJFCB,L$JFCB
         EJECT ,
*----------------------------------------------------------------------
*  Modify the COPYR1 record length as per COPYR1 ddname specification
*----------------------------------------------------------------------
L$DEFR1  EQU   L$XC1CUR-L'XC1BDW            default new RDW length
*
         LA    R6,4                         L'BDW & L'RDW
         LH    R7,XC1RDW                    old COPYR1 LRECL (RDW)
         SR    R7,R6
         UPSR  3,'CPR1 old COPYR1 payload length (hex)',(R7)
*
         SLR   R8,R8
         ICM   R8,3,JFCLRECL                user spec'd new RDW length
         BNZ   *+8
         LH    R8,=AL2(L$DEFR1)             default new RDW length
*
         SR    R8,R6
         UPSR  3,'CPR1 new COPYR1 payload length (hex)',(R8)
         AR    R8,R6
         STH   R8,XC1RDW                    update COPYR1 RDW
         AR    R8,R6
         STH   R8,XC1BDW                    update COPYR1 BDW
         EJECT ,
         PUSH  USING
*----------------------------------------------------------------------
*  Modify the COPYR1 record as per MODTAB specification
*----------------------------------------------------------------------
* R0  = source value
* R2  @ modification destination field
* R3  @ modification source field
* R4  = modification length
* R5  = MODTAB BXLE index
* R6  = MODTAB BXLE increment
* R7  = MODTAB BXLE limit
* R8
* R9  @ COPYR1 BDW
* R14 = modification destination offset
* R15 = modification source offset
*
         UDIAG 5,'CPR1 SYSUT1 DSCB',XMTDSN1,L$DSCB1
         UDIAG 5,'CPR1 SYSUT2 DSCB',XMTDSN2,L$DSCB1
         UDIAG 5,'CPR1 MODTAB',MODTAB,MODEND
         LM    R5,R7,=A(MODTAB,L$MODENT,MODEND-1)
         USING XMODTAB,R5
         B     MODREC
*
MODSKIP  DS    0H                              modification skipped
         OI    SAFLAG1,SA1MDSKP
         UDIAG 4,'CPR1 modskip - previous dest unchanged'
*
MODREC   DS    0H
         LH    R14,0(,R9)
         UDIAG 9,'CPR1: COPYR1 modrec',(R9),(R14)
         SLR   R14,R14
         ICM   R14,3,XMDSTOFF
         LA    R2,COPYR1(R14)                  destination field addr
         SLR   R15,R15
         ICM   R15,3,XMSRCOFF
         LA    R3,XMTDSN1(R15)                 source field addr
         STM   R14,R15,SATEMP
         UPSR  4,'CPR1 dest offset',(R14)
         L     R15,SATEMP+4
         UPSR  4,'CPR1 source offset',(R15)
         LM    R14,R15,SATEMP
*
         SLR   R4,R4
         ICM   R4,3,XMDSTLEN                   field length
         UPSR  4,'CPR1 dest length',(R4)
         BCTR  R4,0
         SLL   R4,2                            index retrieval list
         SLR   R0,R0
         EX    R0,RETDEST(R4)                  IEBCOPY-provided value
         ST    R0,SATEMP
         UPSR  4,'CPR1 DSCB value',(R0)
         L     R0,SATEMP
         LTR   R0,R0                           IEBCOPY value null?
         BZ    *+8                             yes, place new value
         BXLE  R5,R6,MODSKIP                   no, IEBCOPY knows best
*
*  IEBCOPY didn't provide a value for the field of interest
*
         CLC   =X'0000',XMSRCLEN               hardcoded source value?
         BE    MODHARD
*
*  Retrieve value from DSCB, store in COPYR1 destination field
*
MODNORML DS    0H                              normal value
         EX    R0,RETSRC(R4)                   retrieve DSCB value
         ST    R0,SATEMP
         UPSR  5,'CPR1 modnorml DSCB value',(R0)
         L     R0,SATEMP
         EX    R0,MODDEST(R4)                  update destination
         BXLE  R5,R6,MODREC
         B     MODFIN
*
*  Retrieve value from MODTAB, store in COPYR1 destination field
*
MODHARD  DS    0H                              hard-coded value
         SLR   R0,R0
         ICM   R0,3,XMSRCOFF                   source data
         ST    R0,SATEMP
         UPSR  5,'CPR1 modhard value',(R0)
         L     R0,SATEMP
         EX    R0,MODDEST(R4)                  update destination
         BXLE  R5,R6,MODREC
         B     MODFIN
*
RETDEST  ICM   R0,1,0(R2)                      retrieve COPYR1 data
         ICM   R0,3,0(R2)
         ICM   R0,7,0(R2)
         ICM   R0,15,0(R2)
*
RETSRC   ICM   R0,1,0(R3)                      retrieve DSCB data
         ICM   R0,3,0(R3)
         ICM   R0,7,0(R3)
         ICM   R0,15,0(R3)
*
MODDEST  STCM  R0,1,0(R2)                      store COPYR1 data
         STCM  R0,3,0(R2)
         STCM  R0,7,0(R2)
         STCM  R0,15,0(R2)
         POP   USING
*
XMODTAB  DSECT ,
XMDSTOFF DS    XL2                     destination field offset
XMDSTLEN DS    XL2                     destination field length
XMSRCOFF DS    XL2                     source field offset
XMSRCLEN DS    XL2                     source field length
XMITCPR1 CSECT ,
         EJECT ,
*----------------------------------------------------------------------
*  COPYR1 update complete
*----------------------------------------------------------------------
MODFIN   DS    0H
         TM    SAFLAG1,SA1MDSKP        modification(s) skipped?
         BNO   MODFIN3
         UDIAG 1,'CPR1 ignored some MODTAB updates'
MODFIN3  DS    0H
         LH    R14,0(,R9)              COPYR1 BDW
         UDIAG 3,'CPR1: COPYR1 @ exit',(R9),(R14)
*----------------------------------------------------------------------
*  Return to caller
*----------------------------------------------------------------------
EXIT     UDIAG 1,'CPR1 exited'
         UPEND ,                       return to caller
         EJECT ,
*----------------------------------------------------------------------
*  COPYR1 mods table
*----------------------------------------------------------------------
*
*  Format of table entry:
*
*     Destination offset, destination length
*     Source offset, source length,
*
*  when source length = 0, source offset is the value to be applied;
*  else source length = destination length.
*
*  Entries are in ascending destination offset order.
*
         PUSH  PRINT,USING
         PRINT DATA
         USING IECSDSL1,R15                        bogus base
*
MODTAB   DS    0D
         DC    AL2(XC1SMSFG-COPYR1,L'XC1SMSFG)
         DC    AL2(DX1SMSFG-DSCB1,L'DX1SMSFG)      SMS indicators
L$MODENT EQU   *-MODTAB
*
         DC    AL2(XC1HDRCT-COPYR1,L'XC1HDRCT)     hdrcount = x'0002'
         DC    AL2(2,0)
*
         DC    AL2(XC1RESV1-COPYR1,L'XC1RESV1)     resv1 = x'00'
         DC    AL2(0,0)
*
         DC    AL2(XC1LREFD-COPYR1,L'XC1LREFD)
         DC    AL2(DS1REFD-DSCB1,L'DS1REFD)        last ref date
*
         DC    AL2(XC1SCEXT-COPYR1,L'XC1SCEXT)
         DC    AL2(DX1SCEXT-DSCB1,L'DX1SCEXT)      secondary extent
*
         DC    AL2(XC1SCALO-COPYR1,L'XC1SCALO)
         DC    AL2(DS1SCALO-DSCB1,L'DS1SCALO)      secondary allocation
*
         DC    AL2(XC1LSTAR-COPYR1,L'XC1LSTAR)
         DC    AL2(DS1LSTAR-DSCB1,L'DS1LSTAR)      last used TTR
*
         DC    AL2(XC1TRBAL-COPYR1,L'XC1TRBAL)
         DC    AL2(DS1TRBAL-DSCB1,L'DS1TRBAL)      track balance
*
         DC    AL2(XC1RESV2-COPYR1,L'XC1RESV2)     resv2 = x'0000'
         DC    AL2(0,0)
MODEND   EQU   *
         POP   PRINT,USING
         EJECT ,
*----------------------------------------------------------------------
*  Data areas
*----------------------------------------------------------------------
MODLOPN  OPEN  (,INPUT),MF=L           model OPEN
L$OPN    EQU   *-MODLOPN               l' model open
*
         PUSH  PRINT
         PRINT NOGEN
MYDCB    DCB   DDNAME=COPYR1,EXLST=0,DSORG=PS,MACRF=E
L$DCB    EQU   *-MYDCB
         POP   PRINT
*
JFCBLST  DS    0F
         DC    XL1'87'
         DC    AL3(0)
L$JFCBL  EQU   *-JFCBLST
*
CAMLST   CAMLST SEARCH,1,2,3           OBTAIN parmlist
         LTORG ,
*----------------------------------------------------------------------
*  Dynamic savearea & workarea
*----------------------------------------------------------------------
SAVEAREA DSECT ,
SAVREGS  DS    18F
*
SAFLAG1  DS    X
SA1MDSKP EQU   128                     some MODTAB mod(s) skipped
*
SATEMP   DS    4F                      short-term save
         DS    0F
SAVOPN   OPEN  (,INPUT),MF=L           open parmlist
         PUSH  PRINT
         PRINT NOGEN
SAVDCB   DCB   DDNAME=COPYR1,DSORG=PS,MACRF=E
         POP   PRINT
SAVEXLST DS    F                       DCB EXLST=
         DS    0D                      align
SAVJFCB  DS    CL(L$JFCB)              JFCB
SAVCAML  CAMLST SEARCH,1,2,3           CAMLST
L$CAMLST EQU   *-SAVCAML
         DS    0D
SAVDSCB  DS    CL140                   Format1 DSCB (minus dsn), cchhr
         DS    CL5
         DS    0D
L$SA     EQU   *-SAVEAREA              length of savearea
*
         WAXMIT ,
XMITCPR1 UFINI DXDXCPR1,L$SA
         END   ,
