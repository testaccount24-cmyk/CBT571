
Copyright 2002, James M. Morrison

                   TCP/IP design and implementation notes
                   --------------------------------------

Draft 2002-08-08

This initial design assumes that all TCP/IP user programs will be
APF authorized, eliminating code that has to be written in support
of non-APF authorized users (probably need SVC for non-APF users).

Components:
-----------

API
LPALIB routines
Options module
Subsystem initialization routine
MVS modifications
Main task
Subtask: Operator interface
Subtask: I/O support
Miscellaneous notes

Component notes:
----------------

API

    - Application Programming Interface

    - Supports service requests:
      - set options (page fixing, MTU, window size, etc)
      - open port
      - close port
      - send packet
      - receive packet

    - Bindings for S/370 assembler in initial version
      Subsequent versions will offer C language bindings

    - Assembler language macro interface to generate
      - Control block(s) (ala DCB, SSIB, SSOB)
      - Calls LPALIB code (subsystem interface) via IEFSSREQ

    - Status: not begun

LPALIB routines

    - Provides subsystem interface function to relay requests
      from the API to the subsystem (places requests on queues)

    - Supports API requests

      - Open:
        - Verifies desired port/protocol is available, if so
          marks port/protocol as in-use; else exit w/ bad rc
        - Builds control block in the user's address space
          - TCP/IP anchor block (TCPSOK)
          - SSIB - target subsystem
          - SSOB - request descriptor
          - Buffer pool descriptor (packet list, free space list)
          - Options descriptor
            MTU, window size, etc
        - Acquires buffers
        - Find subsystem, identify in control block
          User may specify subsystem name (alternate TCP/IP stacks)
        - May load API module(s) in the user's address space (ala SAM)

      - Close:
        - Releases buffer pool and control block(s)
        - Deletes API modules, if any were loaded
        - Verifies closing address space had port/protocol
          allocated, if so marks port/protocol as free

      - Send packet:
        - Verifies address space has port/protocol allocated
        - Constructs complete packet (IP header, UDP datagram or
          TCP segment) from TCPSOK
 ->       Q: Local Network Header (probably Ethernet) also required?
        - Optionally fix page(s) containing packet data
          Caller may do this themselves and indicate such in request
          as well as whether they wish pages unfixed upon send complete
          Regardless of who does it, packet pages must be fixed in
          storage so subsystem I/O subtask can grab the data without
          taking page fault interrupts
        - Queues request on subsystem send queue
          Queue controlled by CS lockword

      - Receive packet:
        - Verifies address space has port/protocol allocated
        - Examines receive queue to see if packet has already arrived
          If so:
             - marks buffer as transfer-in-progress
             - disables
             - sets CR7
             - uses MVCP to copy data to caller's buffer
             - enables
             - indicate subsystem buffer now free for reuse
               (transfer-in-progress off)
          If not:
             - fixes page(s) containing packet data (as required)
             - Queues request on subsystem queue
               Queue controlled by CS lockword
             - Blocks (WAITs) as requested
               This appears to be OK to do this way, since it looks
               like IEFJSREQ calls our subsys function code in
               the caller's address space

      - Enforces limits on user activities, such as maximum number
        of fixed pages & packet length

    - May be dynamically installed; no CLPA required

    - Monitors MVS operator commands, watching for 'D TCP'
      Shoulder taps the Operator interface subtask to handle D TCP

    - Status:
      - Infrastructure to support load-to-global complete
      - SSVT initialization complete
      - LPALIB code stubs

Options module

    - Specifies user site customization options

    - Assembled and linkedited

    - Status: complete

Subsystem initialization routine

    - executed as part of MVS subsystem initialization at MVS IPL

    - Enables JES support so the TCP started task may use JES2
      SYSIN and SYSOUT services

    - further subsystem initialization is performed by the
      main task

    - Status: complete

MVS modifications

    - IEFJSSNT
      - subsystem name table
        specifies subsystem name and initialization routine
      - Status: complete

    - various
      - Additional Floating Point Registers and
        Binary Floating Point facility
        in support for the LIB390 project (for MVS38j C)
        Preserves new FP regs across dispatch/interrupts
      - Dual Address Space (DAS) support
        Preserves CR7 across dispatch/interrupts
      - Status: Not planned for initial release
        Research appears mainly complete

Main task

    - Runs in the TCP/IP subsystem address space, which is a
      non-swappable MVS started task
      (later versions may be swappable)

    - initializes the subsystem, including establishing the
      subsystem function routines, building the SSVT,
      and building control areas such as queue headers

    - Initiates the subtasks

    - monitors subtasks

    - Status: complete, except marking STC non-swap (SYSEVENT)
      "Monitoring" currently exits when 1st subtask goes down

Subtask: Operator interface

    - Processes MVS operator START command, which may specify
      the unit address of the first 3088 device (there are two)

    - Enables operator commands

    - Processes MVS operator MODIFY comands:

      WARN     - warn user address spaces TCP/IP is terminating
      DRAIN    - begin terminating TCP/IP application
      SHUT     - alternative to MVS STOP operator command
      CANCEL   - cancel TCP/IP user(s)

    - Provides support for the MVS D TCP operator command:

      NETSTAT  - TCP/IP status
      DEBUG    - debugging support

    - Supports the MVS operator STOP command, which terminates
      the TCP/IP application

    - Status: supports START (including cuu), MODIFY (DRAIN
      only) and STOP

Subtask: I/O support

    - Supports the 3088 CTCA used under Hercules to pass packets
      between the TCP/IP application and Hercules, which in turn
      passes packets to and from the underlying host operating
      system (Linux, Windows, etc.)

    - Allocate buffer pool (private area)
      Allocate request pool (CSA)

    - Assemble incoming packets, discard timed out packets

    - Scan queues for I/O requests

    - Performs 3088 I/O (possibly different subtasks
      for send and receive)

    - Responds to foreign host requests against port/protocols
      which are not open
      Later versions will attempt to resist DOS attacks - should
      be handled by Linux, Windows, etc., but might not be done
      so well in all environments

    - Returns status and/or packet data to user (if user WAITing)
      Use MVCP (LPALIB code), cross-memory POST

    - Request descriptor:
         Request type (send/receive)
         options (unfix pages, etc)
         user ASCB address
         user ECB address
         user buffer address
         user buffer length

    - Status: not begun

Miscellaneous notes

    - Not planned for initial release
      - MVS modifications in support of LIB390, DAS
      - Application: FTP server
      - Application: FTP server

Issues:

0001 - Should the subsys function code assemble the packet before
       giving it to the subsystem I/O subtask, or should func code
       merely pass the TCPSOK block and let I/O subtask assemble?




